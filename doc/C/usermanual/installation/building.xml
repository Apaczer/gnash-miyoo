<title>Building from Source</title>

<para>
  Once you have <link linkend="configure">configured</link> &app;,
  you are ready to build the code.  &app; is built using
  <emphasis>GNU make</emphasis>.
</para>

<sect3 id="compile">
  <title>Compiling the Code</title>

  <para>
    The most basic way to compile code is simply:
    <programlisting>
  make
    </programlisting>
    If the compilation ends with an error, check the output of 
    <emphasis>configure</emphasis> and ensure that you are not missing 
    any required prerequisites.
  </para>

  <para>
    The variables used by <emphasis>make</emphasis> can be redefined when
    the program is invoked, if you desire it.   The most interesting flags
    are <emphasis>CFLAGS</emphasis> and <emphasis>CXXFLAGS</emphasis>,
    which are often used to enable debugging or turn of optimization.
    The default value for both of these variables is
    <emphasis>-O2 -g</emphasis>.  A list of influential 
    environment variables can be seen in the configuration help:
    <programlisting>
  ./configure --help
    </programlisting>
    In the following example, debugging is enabled and optimization is
    disabled:
    <programlisting>
  make CFLAGS=-g CXXFLAGS=-g
    </programlisting>
  </para>
</sect3>

<sect3 id="processdoc">
  <title>Creating the Documentation</title>

  <para>
    By default, documentation isn't built, even when you
    <link linkend="install">install</link> &app;.  This is because
    there are a number of <link linkend="docdepend">dependencies 
    for the documentation</link>.  Documentation is built when it
    is specified with a specific target in the generated 
    <emphasis>Makefile</emphasis> in the <filename>doc/C</filename>
    sub-directory.  If you type <emphasis>make install</emphasis> in
    this directory, all documents will be built.
  </para>

  <para>
    You need to specify a target output format when you wish to create
    documentation.  The available output formats are: <emphasis>html</emphasis>,
    <emphasis>pdf</emphasis>, <emphasis>info</emphasis>, 
    <emphasis>man</emphasis>, and <emphasis>alldocs</emphasis>.  
    It is also possible to output <emphasis>GNOME help</emphasis> if
    the <link linkend="features">configure option</link>
    <emphasis>--enable-ghelp</emphasis> was used.  
    The <emphasis>alldocs</emphasis> target will build all output formats
    except <emphasis>GNOME help</emphasis>.
    For example, to create HTML output, type:
    <programlisting>
  make html
    </programlisting>
  </para>

  <para>
    &app; also uses <ulink url="http://www.stack.nl/~dimitri/doxygen/index.html"
    type="http">Doxygen</ulink> to produce <emphasis>HTML</emphasis>
    documentation of &app; internals.  You must have Doxygen installed
    to produce this documentation, which is built from the
    <filename>doc</filename> directory with the command (documents
    will be placed in the subdirectory <filename>apidoc/html</filename>):
    <programlisting>
  make apidoc
    </programlisting>
  </para>
</sect3>


<sect3 id="runtests">
  <title>Running the Tests</title>

  <para>
    If a test fails, please report it by following the
    <link linkend="bugreport">instructions for reporting a bug</link>.
  </para>

  <sect4 id="dejagnu">
    <title>Using DejaGnu</title>

    <para>
  <!--
      TODO: Add a section on running tests without DejaGnu.
  -->
      The easiest way to run &app;'s test suite is to install
      <emphasis><ulink type="http" 
      url="http://www.gnu.org/software/dejagnu">DejaGnu</ulink></emphasis>.
      After installing DejaGnu, run:
      <programlisting>
        make check
      </programlisting>
    </para>
  
    <sect5 id="testing_verbosity">
      <title>Increasing Verbosity</title>
      <para>
        If you encounter a problem with a test, increasing the
        verbosity may make the issue easier to spot.
        Additional details are visible when 
        <emphasis>RUNTESTFLAGS</emphasis> are used to add the 
        <emphasis>verbose</emphasis> and <emphasis>all</emphasis> options.
        Verbose prints more information about the testing process, while
        all includes details on passing tests.  
        <programlisting>
  make check RUNTESTFLAGS="-v -a"
        </programlisting>
      </para> 
    </sect5>
     
    <sect5 id="running_some_tests">
      <title>Running Some Tests</title>
      <para>
        It is possible to run just a particular test, or 
        subdirectory of tests, by specifying the directory or 
        compiled test file.
      </para>
      <para>
        Some tests rely on <emphasis>testsuite/Dejagnu.swf</emphasis>,
        which in turn relies on <emphasis>Ming</emphasis>.
        This file is created when you run 'make check' for the entire
        testsuite, and can also be created on demand:
        <programlisting>
  make -C testsuite Dejagnu.swf 
        </programlisting>
      </para>
      <para>
        In this example, the 'clip_as_button2' test is compiled and
        run:
        <programlisting>
  make -C testsuite/samples clip_as_button2-TestRunner 
  cd testsuite/samples &amp;&amp; ./clip_as_button2-TestRunner
        </programlisting>
        This would create and run all the tests in the directory
        <filename>movies.all</filename>:
        <programlisting>
  make -C testsuite/movies.all check
        </programlisting>
      </para>
    </sect5>
     
  </sect4>
  <sect4 id="manually">
    <title>Running The Tests Manually</title>
     
    <para>
      You may also run test cases by hand, which can be useful if you
      want to see all the debugging output from the test case.  Often
      the messages which come from deep within &app; are most useful for
      development.
    </para>  
     
    <para>
      The first step is to compile the test case, which can be done
      with <filename>make XML-v#.swf</filename> where the '#' is replaced
       with the <emphasis>target</emphasis> SWF version or versions.  
      For example:
      <programlisting>
  make XML-v{5,6,7,8}.swf
      </programlisting>
    </para>
  
    <sect5 id="manual_compiled_tests">
    <title>Movie tests</title>
      <para>
        This creates a Flash movie version of the test case, which
        can be run with a standalone Flash player.  For instance,
        the target for SWF version 6 could be run with &app;:
        <programlisting>
   gnash -v XML-v6.swf
        </programlisting>
      </para>
    </sect5>
  
    <sect5 id="manual_actionscript_tests">
      <title>ActionScript Unit Tests</title>
      <para>
        Unit tests for ActionScript classes in 'testsuite/actionscript.all'
        are run without a graphical display:
        <programlisting>
  gprocessor -v XML-v6.swf
        </programlisting>
      </para>
    </sect5>
  </sect4>



</sect3>
