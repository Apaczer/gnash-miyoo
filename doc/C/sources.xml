<sect1 id="build">
  <title>Building From Source</title>
  
  <para>
  </para>
  
  <sect2 id="codedepend">
    <title>Code Dependancies</title>

    <para>
      Gnash has dependancies on other packages. When installing
      from a packaged release file (rpm, deb, whatever), you'll need
      to install the development versions to get the tools used to
      compile Gnash. The normal runtime packages installed are usually
      missing the headers needed to compile Gnash
    </para>

    <sect3 id="opengl">
      <title>OpenGL</title>
      <para>
	Gnash uses OpenGL for rendering the images. OpenGL is a 3D
	graphics package that support hardware acceleration. You can
	get the free version of OpenGL at this link: 
	<ulink type="http"
	       url="http://www.mesa3d.org">http://www.mesa3d.org</ulink> 
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libgl1-mesa-dev. For RPM or Yum based
	systems, install the libmesa-devel package.
      </para>

    </sect3>

    <sect3 id="sdl">
      <title>SDL</title>
      <para>
	The Simple DirectMedia Layer is a cross-platform multimedia
	library designed to provide low level access to audio,
	keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D
	video framebuffer. You can get SDL from this link:
	<ulink type="http" url="http://www.libsdl.org">http://www.libsdl.org</ulink>  
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libsdl1.2-dev. For RPM or Yum based
	systems, install the SDL-devel package.
      </para>

    </sect3>

    <sect3 id="png">
      <title>PNG</title>
      <para>
	<ulink type="http"
	       url="http://www.libpng.org/pub/png/">PNG</ulink> is a
	patent free image format that is comparable to
	<code>GIF</code>.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libpng12-dev. For RPM or Yum based
	systems, install the libpng package.
      </para>

    </sect3>

    <sect3 id="jpeg">
      <title>JPEG</title>
      <para>
	<ulink type="http"
	       url="http://www.ijg.org/">JPEG</ulink>is a lossy image
	format, heavily used for images because of the smaller size of
	the file.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libjpeg62-dev. For RPM or Yum based
	systems, install the libjpeg package.
      </para>

    </sect3>

    <sect3 id="sdlmixer">
      <title>SDL Mixer</title>
      <para>
	The Simple DirectMedia Layer has an addon package called SDL
	Mixer, which is used to play audio files. SDL_mixer is a
	sample multi-channel audio mixer library. It supports any
	number of simultaneously playing channels of 16 bit stereo
	audio, plus a single channel of music. You can get SDL Mixer
	from this link: <ulink type="http" url="http://www.libsdl.org/projects/SDL_mixer/release/">http://www.libsdl.org/projects/SDL_mixer/release/</ulink>
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libsdl-mixer1.2-dev. For RPM or Yum based
	systems, install the SDL_mixer-devel package.
      </para>

    </sect3>

    <sect3 id="libxml2">
      <title>libxml2</title>
      <para>
	Libxml2 is the GNOME XML parser library. This is used when
	Gnash is configured with XL support. Libxml2 is used to
	parse any incoming messages when using the XML or XMLSocket
	ActionScript classes. You can get libxml2 from this link: 
	<ulink type="http" url="http://xmlsoft.org">http://xmlsoft.org</ulink> 
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libxml2-dev. For RPM or Yum based
	systems, install the libxml2-devel package.
      </para>
    </sect3>
    
    <sect3 id="ogg">
      <title>OGG Vorbis</title>
      <para>
	<ulink type="http" url="http://www.vorbis.com/">Ogg
	Vorbis</ulink> is a patent free audio format that is
	comparable (many people say better) than MP3. This is used by
	SDL_Mixer to play Ogg files. You can get Ogg Vorbis from this link: 
	<ulink type="http" url="http://www.vorbis.com/">
	http://www.vorbis.com/</ulink>.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libogg-dev. For RPM or Yum based
	systems, install the libogg package.
      </para>

    </sect3>

    <sect3 id="libmad">
      <title>libMAD</title>

      <para>
	libMad is a high-quality MPG decoder for audio files. All
	variations of the MP3 format are supported.
	<ulink type="http"
	       url="http://www.underbit.com/products/mad/">
	http://www.underbit.com/products/mad/</ulink>. You can get
	libMAD from this link: <ulink type="http"
	url="http://xmlsoft.org">http://xmlsoft.org</ulink> 
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libmad0-dev. For RPM or Yum based
	systems, install the libmad package.
      </para>

    </sect3>

    <sect3 id="mozilla">
      <title>Mozilla/Firefox</title>

      <para>
	To build the plugin, you need Mozilla/Firefox. You probably
	already have Firefox or Mozilla installed on your
	computer, but probably not the development files. You can get
	Mozilla/Firefox from this link:
	<ulink type="http"
	       url="http://www.mozilla.org">http://www.mozilla.org</ulink> 
      </para>

      <para>
	For now I actually build Firefox out of CVS, which has gotten
	pretty easy if you have enough disk space. Gnash uses the
	Mozilla SDK, which is reasonably portable across a variety of
	versions of Mozilla/Firefox without recompiling.
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install mozilla-dev or firefox-dev. For RPM or Yum
	based systems, install the mozilla-devel or firefox-devel
	package.
      </para>
    </sect3>
  </sect2>
  
  <sect2 id="docdepend">
    <title>Documentation Dependancies</title>
    
    <sect3 id="docbook">
      <title>Docbook</title>

      <para>
	<ulink type="http" url="http://docbook.sourceforge.net/"> 
	Docbook</ulink> is an industry standard XML format for technical
	documentation. It is used by many projects, as there are free
	software implementations of the Docbook style-sheets and
	tools. It is used by both the <ulink type="http"
	url="http://www.gnome.org">GNOME</ulink> project, and the
	<ulink type="http" url="http://www.tldp.org/"> Linux
	Documentation Project.</ulink>. It is customizable by using
	style-sheets for each output device. Default style-sheets are
	included for a variety of print formats, like <code>PDF</code>
	and <code>HTML</code>.
      </para>
      <para>
	You can get Docbook from this link: 
	<ulink type="http"
	       url="http://sourceforge.net/project/showfiles.php?group_id=21935#files">
	http://sourceforge.net/project/showfiles.php?group_id=21935#files</ulink>.
      </para>
      <para>
	To install a binary packages using apt-get (on Debian based
	systems), install the docbook, docbook-xsl, docbook-xml,
	docbook-dsssl,and docbook-utils packages. For RPM or Yum based
	systems, install the docbook, docbook-style-xsl,
	docbook-style-dsssl, and docbook-utils packages.
      </para>
    </sect3>

    <sect3 id="docbook2x">
      <title>DocBook2X</title>

      <para>
	 DocBook2X is a software package that converts DocBook
	 documents into the traditional Unix man page format and the
	 GNU Texinfo format. It supports tables for man pages,
	 internationalization, and easy customization of the
	 output using XSLT. This package is used to convert the Gnash
	 documentation into HTML and <ulink type="http"
	 url="http://www.gnu.org/software/texinfo/">
	 Texinfo</ulink>formats. Texinfo can later be converted to
	 standard GNU <code>info</code> pages.
      </para>
      <para>
	You can get DocBook2X from this link: 
	<ulink type="http" url="http://docbook2x.sourceforge.net/">
	http://docbook2x.sourceforge.net/</ulink>. Texinfo is
	available at this link:
	<ulink type="http" url="http://ftp.gnu.org/gnu/texinfo/">
	http://ftp.gnu.org/gnu/texinfo/</ulink>.
      </para>
      <para>
	To install a binary package of DocBook2X using apt-get (on
	Debian based systems), install docbook2x. For RPM or Yum based
	systems, install the docbook2x package.
	To install a binary package of Texinfo using apt-get (on
	Debian based systems), install texinfo. For RPM or Yum based
	systems, install the texinfo package.
      </para>
    </sect3>

    <sect3 id="fop">
      <title>FOP</title>

      <para>
	FOP (Formatting Objects Processor) is the world's first print 
	formatter driven by XSL formatting objects (XSL-FO) and the
	world's first output independent formatter. It is a
	<code>Java</code> application that reads a formatting object
	(FO) tree and renders the resulting pages to a specified
	output. Output formats  currently supported include PDF, PCL,
	PS, SVG, XML, Print, AWT, MIF and Text. The default output
	target is PDF.
      </para>

      <para>
	You can get <code>fop</code> from this link: 
	<ulink type="http" url="http://xmlgraphics.apache.org/fop/">
	http://xmlgraphics.apache.org/fop/</ulink>. Currently only
	<code>fop version 0.20.5</code> works with the current DocBook
	tools.
      </para>
    </sect3>

    <sect3 id="java">
      <title>Java</title>

      <para>
	The <code>fop</code> processor is a <code>Java</code>
	application, so it needs a Java runtime to work. This is
	installed on many platforms by default, but unfortunately
	<code>fop</code> doesn't work with the <ulink type="http"
	url="http://gcc.gnu.org/java/">GCJ</ulink> runtime. There is
	apparently work being done on FOP to make it usable, but for
	now, this means installing <ulink type="http"
	url="http://java.sun.com/">Sun Java</ulink>.
      </para>

      <para>
	In addition to the default <code>j2re</code> package, you also
	need to install <code>JAI</code>, the Java Advanced Imaging
	library. You can get <code>JAI</code> from <ulink type="http"
	url="http://java.sun.com/products/java-media/jai/iio.html">
	this link</ulink>. <code>JAI</code> is not required, and the
	<code>PDF</code> file will be generated. It will just be
	missing all the graphics.
      </para>
      <para>
	<code>Fop</code> also requires an environment variable to be
	set. This is JAVA_HOME. This needs to point to the top
	directory where your <code>Sun j2re</code> is installed. If
	you have any other problems with your Java installation, you
	can also try adding the <code>Sun j2re</code> path to the
	<code>CLASSPATH</code> environment variable.
      </para>
    </sect3>

  </sect2>
    
  <sect2 id="configure">
    <title>Configuring The Code</title>
    
    <para>
      Gnash uses GNU Autoconf (<ulink type="http"
      url="http://www.gnu.org/software/autoconf/">
      http://www.gnu.org/software/autoconf</ulink>) for
      configuration. All the standard configure options apply. 
    </para>

    <para>
      By default, `make install' will install all the files in
      `/usr/local/bin', `/usr/local/lib' etc.  You can specify
      an installation prefix other than `/usr/local' using `--prefix',
      for instance `--prefix=$HOME'.
    </para>

    <para>
      Occasionally the default paths for a development package
      aren't correct. There is a series of options that can be used
      to adjust these paths to your own setup. By default, Gnash
      will look in all the standard places for these tools.
    </para>
    
    <para>
      A configure script can support many options, but they fall
      into two main types. The first type are options to enable or
      disable features. The second type is used to specify custom
      paths for development packages that can't be found by the
      default searching and testing.
    </para>

    <sect3 id="confpath">
      <title>Specifying A Custom Path</title>

      <para>
	This set of options typically use a <code>--with-[name]</code>
	naming convention. A Prefix can often be supplied, which is
	the top level directory that can be used to look for the other
	sub directories. Most options of this type have two
	variations, one to specify a path to the header files, and
	another to specify a path to the libraries. This lets you
	override the default paths <code>configure</code> finds, or
	specify your own path.
      </para>

      <variablelist>
	<varlistentry>
	  <term>--x-includes=DIR</term>
	  <listitem>
	    <para>
	      X include files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--x-libraries=DIR</term>
	  <listitem>
	    <para>
	      X library files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml=PFX</term>
	  <listitem>
	    <para>
	      Prefix to where libxml is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-libraries=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-includes=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml header files are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox=PFX</term>
	  <listitem>
	    <para>
	      Prefix where firefox is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox-libraries=DIR</term>
	  <listitem>
	    <para>
	      Directory where firefox library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox-includes=DIR</term>
	  <listitem>
	    <para>
	      Directory where firefox header files are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-docbook=DIR</term>
	  <listitem>
	    <para>
	      Directory where the DocBook style-sheets are installed.	      
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl-prefix=PFX</term>
	  <listitem>
	    <para>
	      Prefix where SDL is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl_mixer-incl</term>
	  <listitem>
	    <para>
	      Directory where sdl_mixer header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl_mixer-lib</term>
	  <listitem>
	    <para>
	      Directory where sdl_mixer library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-incl</term>
	  <listitem>
	    <para>
	      Directory where zlib header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-lib</term>
	  <listitem>
	    <para>
	      Directory where zlib library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-incl</term>
	  <listitem>
	    <para>
	      Directory where jpeg header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-lib</term>
	  <listitem>
	    <para>
	      Directory where jpeg library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-incl</term>
	  <listitem>
	    <para>
	      Directory where png header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-lib</term>
	  <listitem>
	    <para>
	      Directory where png library is installed.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </sect3>

    <sect3 id="confoptions">
      <title>Configure Options</title>
      
      <para>
	In addition to being able to specify your the directories for
	various sub components, there are also some switches that can
	be used at configuration time to enable or disable various
	features of Gnash. There are defaults for all of these
	options. These are typically used only by developers who don't
	have all the other development packages installed, and wants
	to limit what is required for a quite build of <code>Gnash</code>.
      </para>

      <variablelist>
	<varlistentry>
	  <term>--disable-xml</term>
	  <listitem>
	    <para>
	      Disable support for XML. The default is to support
	      XML. 
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>--enable-dom</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      DOM based parser. This is the default.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-xmlreader</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      SAX based parser.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-plugin</term>
	  <listitem>
	    <para>
	      Enable support for being a plugin. This is the default.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>--enable-dmalloc</term>
	  <listitem>
	    <para>
	      Enable support for the DMalloc memory debugging tool.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-i810-lod-bias</term>
	  <listitem>
	    <para>
	      Enable fix for Intel 810 LOD bias problem. Older version
	      of libMesa on the Intel i810 or i815 graphics processor
	      need this flag or Gnash will core dump. This has been
	      fixed in newer versions (summer 2005) of libMesa.
	    </para>
	  </listitem>
	</varlistentry>


      </variablelist>
      
      <para>
	You can control other flags used for compiling using
	environment variables. Set these variables before configuring,
	and they will be used by the configure process instead of the
	default values.
      </para>

      <variablelist>
	<varlistentry>
	  <term>CXX</term>
	  <listitem>
	    <para>
	      C++ compiler command.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>LDFLAGS</term>
	  <listitem>
	    <para>
	      linker flags, e.g. -L[library directory] if you have libraries in a
	      nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CPPFLAGS</term>
	  <listitem>
	    <para>
	      C/C++ preprocessor flags, e.g. -I[headers directory] if you have
	      headers in a nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>CXXFLAGS</term>
	  <listitem>
	    <para>
	      C++ compiler flags.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect3>

  </sect2>

  <sect2 id="building">
    <title>Building Gnash</title>

    <para>
      After managing to configure Gnash, building the code is
      simple. Gnash is built using <code>GNU make</code>.
    </para>


    <sect3 id="compile">
      <title>Compiling The Code</title>

      <para>
	After configuring, typing <code>make</code> will compile the
	code. No options are necessary. If desired, you can redefine
	the variables used by <code>make</code> on the command line
	when invoking the program. The few flags of interest are
	<code>CFLAGS</code> and	<code>CXXFLAGS</code>, often used to
	turn on debugging or turn off optimizing. Invoking make as in
	this example would build all the code with debugging turned
	on, and optimizing turned off. The default values for both of
	these variables is <code>-O2 -g</code>.

	<programlisting>
	  make CFLAGS=-g CXXFLAGS=-g
	</programlisting>
      </para>
      
      <para>
	If the compilation ends with an error, check the output of
	configure and make sure nothing required to build Gnash is
	missing.
      </para>
    </sect3>
    
    <sect3 id="processdoc">
      <title>Processing The Documentation</title>
      
      <para>
	By default, the documentation isn't built at all. It isn't
	even built when typing <code>make install</code> from the top
	level build directory. It's only built when specified with a
	specific target in the generated <code>Makefile</code> in the
	<code>doc/C/</code> sub-directory. All the docs are built in
	this directory when executing a <code>make install</code>.
      </para>
      
      <para>
	There is a target for each output format, <code>make
	html</code>, <code>make pdf</code>, <code>make info</code>,
	and <code>make man</code>. A higher level target, <code>make
	alldocs</code>, builds the four main formats for the
	documentation.
      </para>

    </sect3>
  </sect2>

  <sect2 id="install">
    <title>Installation</title>
    
    <para>
      Gnash installs it's libraries so they can be found in the
      runtime path for the Gnash executable. Unless the --prefix
      option is used at configuration time, the libraries get
      installed in /usr/local/lib. If you install Gnash in a
      non-standard location, you have to specify this runtime path
      by one of two means.
    </para>


    <para>
      The traditional way that works on all Unix platforms is to set
      the LD_LIBRARY_PATH environment variable to $prefix/lib. You
      can have multiple paths in this variable as long as they are
      separated by a colon ":" character.
    </para>

    <para>
      For GNU/Linux systems, the custom path to the libraries can be
      added to the /etc/ld.so.conf file. After adding the custom
      path, then run (as root) the <code>ldconfig</code> command to
      update the runtime cache.
    </para>

    <sect3 id="codeinstall">
      <title>What Code Gets Installed and Where</title>

      <para>
	Several libraries get installed, as well as the three
	executables. All the libraries, <code>libbase, libgeometry,
	libgbackend, libserver, and libmoxsdk</code> get installed in the
	directory pointed to by <code>$prefix</code>. This variable is
	set by the <code>--prefix</code> option at configure time, and
	if not specified, it defaults to <code>/usr/local</code>. All
	the libraries get installed in <code>$prefix/lib</code> where
	most packages also install their libraries.
      </para>
      <para>
	The plugin gets installed in the plugins directory of the
	version of the<code>Firefox</code> or <code>Mozilla</code> you
	have the development packaged installed for. For builds from
	Mozilla CVS, the default installation directory is
	<code>/usr/local/lib/firefox-[version
	number]/plugins/</code>. The default system directory used
	when installing packages is
	<code>/usr/lib/mozilla/plugins</code>. Note that you have to be
	<code>root</code> to install files in a system directory. For
	some reason when the plugin is installed in the users
	<code>$HOME/.mozilla/plugins</code> or
	<code>$HOME/.firefox/plugins</code> directory, unresolved
	symbols from deep within Firefox appear.
      </para>

      <para>
	The executables get installed in a <code>bin</code> directory of
	the directory specified by <code>$prefix</code>. Once again,
	this path defaults to <code>/usr/local/bin</code> if a special
	prefix wasn't configured in.
      </para>

      <para>
	If using a single file-system <code>NFS</code>mounted to
	multiple platforms, you can specify an additional options,
	<code>--exec-prefix</code>. This is where all the platform
	dependent executables and libraries can get installed.
      </para>
    </sect3>

    <sect3 id="docinstall">
      <title>What Documentation Gets Installed and Where</title>

      <para>
	The documentation only installs when GNOME Help support is
	enabled by using <code>--enable-ghelp</code>. Because GNOME
	help files get installed in a system directory when building
	from source, you need to either change the permissions on the
	destination directory, or do the install as <code>root</code>.
	The default directory for GNOME Help files is:
	<code>/usr/local/share/gnash/doc/gnash/C/</code>. 
      </para>
      <para>
	A config file in the Gnash source tree,
	<code>doc/C/gnash.omf</code> is used to specify under which
	menu item Gnash is listed in the GNOME Help system.
      </para>

    </sect3>
  </sect2>
</sect1>


