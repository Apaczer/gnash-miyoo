<sect1 id="build">
  <title>Building From Source</title>
  
  <para>
  </para>
  
  <sect2 id="codedepend">
    <title>Code Dependencies</title>

    <para>
      Gnash has dependencies on other packages. When installing
      from a packaged release file (rpm, deb, etc.), you'll need
      to install the development versions to get the tools used to
      compile Gnash. The normal runtime packages installed are usually
      missing the headers needed to compile Gnash.
    </para>

    <sect3 id="opengl">
      <title>OpenGL</title>
      <para>
	Gnash uses OpenGL for rendering the images. OpenGL is a 3D
	graphics package which supports hardware acceleration. You can
	get the free version of OpenGL at this link: 
	<ulink type="http"
	       url="http://www.mesa3d.org">http://www.mesa3d.org</ulink> 
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libgl1-mesa-dev. For RPM or Yum based
	systems, install the libmesa-devel package.
      </para>

    </sect3>

    <sect3 id="agg">
      <title>AGG</title>
      <para>
	AGG is the AntiGrain low-level 2D graphics library used
	instead of OpenGL on embedded systems. This can be used on the
	desktop as well, but its primary purpose is to run without
	OpenGL.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libagg-dev. For RPM or Yum based
	systems, install the agg-devel package.
      </para>
    </sect3>

    <sect3 id="gtkglext">
      <title>GtkGlExt</title>
      <para>
	GtkGlExt is an optional package used instead of SDL. Gtk
	enables better integration with Firefox, as well as better
	event handling and higher level GUI constructs like menus and
	dialog boxes.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install gtkglext-dev. For RPM or Yum based
	systems, install the gtkglext-devel package.
      </para>
    </sect3>

    <sect3 id="pango">
      <title>Pango</title>
      <para>
	Pango is a dependency of GtkGlExt, and is used for font handling.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install pango-dev. For RPM or Yum based
	systems, install the pango-devel package.
      </para>
    </sect3>

    <sect3 id="atk">
      <title>Atk</title>
      <para>
	Atk is a dependency of GtkGlExt, and is used for accessibility
	support.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install atk-dev. For RPM or Yum based
	systems, install the atk-devel package.
      </para>
    </sect3>

    <sect3 id="cairo">
      <title>Cairo</title>
      <para>
	Cairo is a dependency of GtkGlExt, and is used for 2D rendering.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install cairo-dev. For RPM or Yum based
	systems, install the cairo-devel package.
      </para>
    </sect3>

    <sect3 id="boost">
      <title>Boost</title>
      <para>
	Boost is a library of portable C++ classes and templates which
	layer on top of STL. Boost is used for thread and mutext
	handling.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install boost-dev. For RPM or Yum based
	systems, install the libboost-devel package.
      </para>
    </sect3>

    <sect3 id="glib">
      <title>Glib</title>
      <para>
	Glib is a dependency of GtkGlExt, and is a collection of
	commonly used functions.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install glib-dev. For RPM or Yum based
	systems, install the glib-devel package.
      </para>
    </sect3>

    <sect3 id="gstreamer-dep">
      <title>Gstreamer</title>
      <para>
	Gstreamer is used for sound and video support. It is not
	needed to build this release. Currently only Gstreamer version
	0.10 or higher can be used.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install streamer-dev. For RPM or Yum based
	systems, install the gstreamer-devel package. Version 0.10 or
	greater will be required.
      </para>
    </sect3>

    <sect3 id="ffmpeg-dep">
      <title>FFMPEG</title>
      <para>
	FFMPEG can also be used for sound and video support. It is not
	needed to build this release, but is recommended if you want
	working sound.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install ffmpeg-dev. For RPM or Yum based
	systems, install the libffmpeg-devel package. Version 0.10 or
	greater will be required.
      </para>
    </sect3>

    <sect3 id="sdl">
      <title>SDL</title>
      <para>
	The Simple DirectMedia Layer is a cross-platform multimedia
	library designed to provide low level access to audio,
	keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D
	video framebuffer. You can get SDL from this link:
	<ulink type="http" url="http://www.libsdl.org">
	http://www.libsdl.org</ulink>
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libsdl1.2-dev. For RPM or Yum based
	systems, install the SDL-devel package.
      </para>

    </sect3>

    <sect3 id="png">
      <title>PNG</title>
      <para>
	<ulink type="http"
	       url="http://www.libpng.org/pub/png/">PNG</ulink> is a
	patent-free image format that is comparable to
	<emphasis>GIF</emphasis>.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libpng12-dev. For RPM or Yum based
	systems, install the libpng package.
      </para>

    </sect3>

    <sect3 id="jpeg">
      <title>JPEG</title>
      <para>
	<ulink type="http"
	       url="http://www.ijg.org/">JPEG</ulink> is a lossy image
	format, heavily used for images because of the smaller size of
	the file.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libjpeg62-dev. For RPM or Yum based
	systems, install the libjpeg package.
      </para>

    </sect3>

    <sect3 id="libxml2">
      <title>libxml2</title>
      <para>
	Libxml2 is the GNOME XML parser library. This is used when
	Gnash is configured with XML support. Libxml2 is used to
	parse any incoming messages when using the XML or XMLSocket
	ActionScript classes. You can get libxml2 from this link: 
	<ulink type="http" url="http://xmlsoft.org">http://xmlsoft.org</ulink> 
      </para>

      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libxml2-dev. For RPM or Yum based
	systems, install the libxml2-devel package.
      </para>
    </sect3>
    
    <sect3 id="ogg">
      <title>Ogg Vorbis</title>
      <para>
	<ulink type="http" url="http://www.vorbis.com/">Ogg
	Vorbis</ulink> is a patent free audio format that is
	comparable (many people say better) to MP3. This is used by
	SDL to play Ogg files. You can get Ogg Vorbis from this
	link: <ulink type="http" url="http://www.vorbis.com/">
	http://www.vorbis.com/</ulink>.
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libogg-dev. For RPM or Yum based
	systems, install the libogg package.
      </para>

    </sect3>

    <sect3 id="libmad">
      <title>libMAD</title>

      <para>
	libMad is a high-quality MPG decoder for audio files. All
	variations of the MP3 format are supported.
	<ulink type="http"
	       url="http://www.underbit.com/products/mad/">
	http://www.underbit.com/products/mad/</ulink>. You can get
	libMAD from this link: <ulink type="http"
	url="http://xmlsoft.org">http://xmlsoft.org</ulink> 
      </para>
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install libmad0-dev. For RPM or Yum based
	systems, install the libmad package.
      </para>

    </sect3>

    <sect3 id="mozilla">
      <title>Mozilla/Firefox</title>

      <para>
	The Mozilla development package is no longer needed to build
	the plugin. The required header files are now included in
	Gnash, so it builds without Mozilla or Firefox installed at
	all.
      </para>
	
      <para>
	To install a binary package using apt-get (on Debian based
	systems), install mozilla-dev or firefox-dev. For RPM or Yum
	based systems, install the mozilla-devel or firefox-devel
	package.
      </para>
    </sect3>
  </sect2>
  
  <sect2 id="docdepend">
    <title>Documentation Dependencies</title>
    
    <sect3 id="docbook">
      <title>Docbook</title>

      <para>
	<ulink type="http" url="http://docbook.sourceforge.net/"> 
	Docbook</ulink> is an industry standard XML format for technical
	documentation. It is used by many projects, as there are free
	software implementations of the Docbook style-sheets and
	tools. It is used by both the <ulink type="http"
	url="http://www.gnome.org">GNOME</ulink> project, and the
	<ulink type="http" url="http://www.tldp.org/">Linux
	Documentation Project</ulink>. It is customizable by using
	style-sheets for each output device. Default style-sheets are
	included for a variety of print formats, like <emphasis>PDF</emphasis>
	and <emphasis>HTML</emphasis>.
      </para>
      <para>
	You can get Docbook from this link: 
	<ulink type="http"
	       url="http://sourceforge.net/project/showfiles.php?group_id=21935#files">
	http://sourceforge.net/project/showfiles.php?group_id=21935#files</ulink>.
      </para>
      <para>
	To install a binary packages using apt-get (on Debian based
	systems), install the docbook, docbook-xsl, docbook-xml,
	docbook-dsssl,and docbook-utils packages. For RPM or Yum based
	systems, install the docbook, docbook-style-xsl,
	docbook-style-dsssl, and docbook-utils packages.
      </para>
    </sect3>

    <sect3 id="docbook2x">
      <title>DocBook2X</title>

      <para>
	 DocBook2X is a software package that converts DocBook
	 documents into the traditional Unix man page format and the
	 GNU Texinfo format. It supports tables for man pages,
	 internationalization, and easy customization of the
	 output using XSLT. This package is used to convert the Gnash
	 documentation into HTML and <ulink type="http"
	 url="http://www.gnu.org/software/texinfo/">
	 Texinfo</ulink> formats. Texinfo can later be converted to
	 standard GNU <emphasis>info</emphasis> pages.
      </para>
      <para>
	You can get DocBook2X from this link: 
	<ulink type="http" url="http://docbook2x.sourceforge.net/">
	http://docbook2x.sourceforge.net/</ulink>. Texinfo is
	available at this link:
	<ulink type="http" url="http://ftp.gnu.org/gnu/texinfo/">
	http://ftp.gnu.org/gnu/texinfo/</ulink>.
      </para>
      <para>
	To install a binary package of DocBook2X using apt-get (on
	Debian based systems), install docbook2x. For RPM or Yum based
	systems, install the docbook2x package.
	To install a binary package of DocBook2X using apt-get (on
	Debian based systems), install texinfo. For RPM or Yum based
	systems, install the texinfo package.
      </para>
    </sect3>

    <sect3 id="fop">
      <title>FOP</title>

      <para>
	FOP (Formatting Objects Processor) is the world's first print 
	formatter driven by XSL formatting objects (XSL-FO) and the
	world's first output independent formatter. It is a
	<emphasis>Java</emphasis> application that reads a formatting object
	(FO) tree and renders the resulting pages to a specified
	output. Output formats  currently supported include PDF, PCL,
	PS, SVG, XML, Print, AWT, MIF and Text. The default output
	target is PDF.
      </para>

      <para>
	You can get <emphasis>fop</emphasis> from this link: 
	<ulink type="http" url="http://xmlgraphics.apache.org/fop/">
	http://xmlgraphics.apache.org/fop/</ulink>. Presently only
	<emphasis>fop version 0.20.5</emphasis> works with current DocBook
	tools.
      </para>
    </sect3>

    <sect3 id="java">
      <title>Java</title>

      <para>
	The <emphasis>fop</emphasis> processor is a <emphasis>Java</emphasis>
	application, so it needs a Java runtime to work. This is
	installed on many platforms by default, but unfortunately
	<emphasis>fop</emphasis> doesn't work with the <ulink type="http"
	url="http://gcc.gnu.org/java/">GCJ</ulink> runtime. There is
	apparently work being done on FOP to make it usable, but for
	now, this means installing <ulink type="http"
	url="http://java.sun.com/">Sun Java</ulink>.
      </para>

      <para>
	In addition to the default <emphasis>j2re</emphasis> package, you also
	need to install <emphasis>JAI</emphasis>, the Java Advanced Imaging
	library. You can get <emphasis>JAI</emphasis> from <ulink type="http"
	url="http://java.sun.com/products/java-media/jai/iio.html">
	this link</ulink>. <emphasis>JAI</emphasis> is not required, and the
	<emphasis>PDF</emphasis> file will be generated. It will just be
	missing all the graphics.
      </para>
      <para>
	<emphasis>Fop</emphasis> also requires an environment variable to be
	set. This is JAVA_HOME. This needs to point to the top
	directory where your <emphasis>Sun j2re</emphasis> is installed. If
	you have any other problems with your Java installation, you
	can also try adding the <emphasis>Sun j2re</emphasis> path to the
	<emphasis>CLASSPATH</emphasis> environment variable.
      </para>
    </sect3>

  </sect2>
    
  <sect2 id="configure">
    <title>Configuring The Code</title>
    
    <para>
      Gnash uses GNU Autoconf (<ulink type="http"
      url="http://www.gnu.org/software/autoconf/">
      http://www.gnu.org/software/autoconf</ulink>) for
      configuration. All the standard configure options apply. 
    </para>

    <para>
      The <emphasis>configure</emphasis> script is not included in the CVS
      sources. It must be produced by running the
      <emphasis>./autogen.sh</emphasis> script in the top level source
      directory. This script requires you have <emphasis>autoconf</emphasis>,
      <emphasis>automake</emphasis>, and <emphasis>libtool</emphasis> installed.
      After building this script, you can configure Gnash by running it from
      the source directory like this: <emphasis>./configure</emphasis>, or from
      another directory by specifying the full path to configure.
    </para>

    <para>
      By default, `make install' will install all the files in
      `/usr/local/bin', `/usr/local/lib' etc.  You can specify
      an installation prefix other than `/usr/local' using `--prefix',
      for instance `--prefix=$HOME'.
    </para>

    <para>
      Occasionally the default paths for a development package
      aren't correct. There are several options which can be used
      to adjust these paths to your own setup. By default, Gnash
      will look in all the standard places for these tools.
    </para>
    
    <para>
      A configure script can support many options, but they fall
      into two main types. The first type are options to enable or
      disable features. The second type is used to specify custom
      paths for development packages which can't be found by the
      default searching and testing.
    </para>

    <sect3 id="confpath">
      <title>Specifying A Custom Path</title>

      <para>
	This set of options typically use a <emphasis>--with-[name]</emphasis>
	naming convention. A Prefix can often be supplied, which is
	the top level directory which can be used to look for the other
	sub directories. Most options of this type have two
	variations, one to specify a path to the header files, and
	another to specify a path to the libraries. This lets you
	override the default paths <emphasis>configure</emphasis> finds, or
	specify your own paths.
      </para>

      <para>
	By default, none of the options should be required unless you
	want Gnash to use a specific version of a development package,
	or the configure test for Gnash fails to find the
	component. There are a lot of options, but Gnash has a lot of
	dependencies. If you find a configure test is failing on your
	machine, please <ulink  type="http"
	url="https://savannah.gnu.org/bugs/?group=gnash">submit a patch</ulink>
	or <ulink  type="http"
	url="https://savannah.gnu.org/bugs/?group=gnash">file a bug
	report</ulink>.
      </para>

      <variablelist>
	<varlistentry>
	  <term>--x-includes=DIR</term>
	  <listitem>
	    <para>
	      X include files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--x-libraries=DIR</term>
	  <listitem>
	    <para>
	      X library files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml=PFX</term>
	  <listitem>
	    <para>
	      Prefix to where libxml is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-libraries=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-includes=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml header files are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-docbook=DIR</term>
	  <listitem>
	    <para>
	      Directory where the DocBook style-sheets are installed.	      
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl-prefix=PFX</term>
	  <listitem>
	    <para>
	      Prefix where SDL is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-incl</term>
	  <listitem>
	    <para>
	      Directory where zlib header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-lib</term>
	  <listitem>
	    <para>
	      Directory where zlib library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-incl</term>
	  <listitem>
	    <para>
	      Directory where jpeg header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-lib</term>
	  <listitem>
	    <para>
	      Directory where jpeg library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-incl</term>
	  <listitem>
	    <para>
	      Directory where png header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-lib</term>
	  <listitem>
	    <para>
	      Directory where png library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-qt-dir</term>
	  <listitem>
	    <para>
	      Directory where QT is installed. This is only used by
	      the Klash plugin.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-qt-includes</term>
	  <listitem>
	    <para>
	      Directory where the QT header files are installed. This
	      is only used by the Klash plugin.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-qt-libraries</term>
	  <listitem>
	    <para>
	      Directory where the QT libraries are installed. This is
	      only used by the Klash plugin.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-plugindir</term>
	  <listitem>
	    <para>
	      This is the directory to install the Firefox plugin in.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-ming</term>
	  <listitem>
	    <para>
	      Ming is used to build test cases, but not by the Gnash
	      player itself.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-mad_incl</term>
	  <listitem>
	    <para>
	      Directory where libmad header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-mad_lib</term>
	  <listitem>
	    <para>
	      Directory where libmad library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-ogg_incl</term>
	  <listitem>
	    <para>
	      Directory where the libogg headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-ogg_lib</term>
	  <listitem>
	    <para>
	      Directory where the libogg library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-gstreamer-incl</term>
	  <listitem>
	    <para>
	      Directory where the Gstreamer headers are
	      installed. Gstreamer version 0.10 or greater must be used.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-gstreamer-lib</term>
	  <listitem>
	    <para>
	      Directory where the Gstreamer library is
	      installed. Gstreamer version 0.10 or greater must be used.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-opengl-includes</term>
	  <listitem>
	    <para>
	      Directory where OpenGL (libMesa) headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-opengl-lib</term>
	  <listitem>
	    <para>
	      Directory where the OpenGL (libMesa) library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-glext-incl</term>
	  <listitem>
	    <para>
	      Directory where GtkGlExt headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-glext-lib</term>
	  <listitem>
	    <para>
	      Directory where the GtkGlExt library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-gtk2-incl</term>
	  <listitem>
	    <para>
	      Directory where the Gtk2 headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-gtk2-lib</term>
	  <listitem>
	    <para>
	      Directory where the Gtk2 library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-cairo_incl</term>
	  <listitem>
	    <para>
	      Directory where the Cairo headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-cairo-lib</term>
	  <listitem>
	    <para>
	      Directory where the Cairo library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-glib-incl</term>
	  <listitem>
	    <para>
	      Directory where the Glib headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-glib-lib</term>
	  <listitem>
	    <para>
	      Directory where the Glib library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-pango-incl</term>
	  <listitem>
	    <para>
	      Directory where the Pango headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-pango-lib</term>
	  <listitem>
	    <para>
	      Directory where the Pango library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-atk-incl</term>
	  <listitem>
	    <para>
	      Directory where the ATK headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-atk-lib</term>
	  <listitem>
	    <para>
	      Directory where the ATK library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-pthread-incl</term>
	  <listitem>
	    <para>
	      Directory where the Pthread headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-pthread-lib</term>
	  <listitem>
	    <para>
	      Directory where the Pthread library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-agg-incl</term>
	  <listitem>
	    <para>
	      Directory where the AGG (Antigrain) headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-agg-lib</term>
	  <listitem>
	    <para>
	      Directory where the AGG (Antigrain) library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-ffmpeg-incl</term>
	  <listitem>
	    <para>
	      Directory where the FFMPEG headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-ffmpeg-lib</term>
	  <listitem>
	    <para>
	      Directory where the FFMPEG library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-boost-incl</term>
	  <listitem>
	    <para>
	      Directory where the Boost headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-boost-lib</term>
	  <listitem>
	    <para>
	      Directory where the Boost library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-curl-incl</term>
	  <listitem>
	    <para>
	      Directory where the libCurl headers are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-curl-lib</term>
	  <listitem>
	    <para>
	      Directory where the libCurl library is installed.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </sect3>

    <sect3 id="confoptions">
      <title>Configure Options</title>
      
      <para>
	In addition to being able to specify your the directories for
	various sub-components, there are also some switches which can
	be used at configuration time to enable or disable various
	features of Gnash. There are defaults for all of these
	options. These are typically used only by developers who don't
	have all the other development packages installed, and want
	to limit what is required for a quite build of <emphasis>Gnash</emphasis>.
      </para>

      <variablelist>
	<varlistentry>
	  <term>--disable-xml</term>
	  <listitem>
	    <para>
	      Disable support for XML. The default is to support XML. 
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>--disable-fork</term>
	  <listitem>
	    <para>
	      Disable the plugin forking the standalone player,and
	      using a thread for the player instead. Currently forking
	      the standalone player will give you the best results.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-plugin</term>
	  <listitem>
	    <para>
	      Enable building the plugin. By default the
	      Mozilla Firefox plugin won't be built, even if all the required
	      files are found by configure. Configure
	      <emphasis>--with-plugindir=</emphasis> to specify where the
	      plugin should be installed. 
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--disable-glext</term>
	  <listitem>
	    <para>
	      Disable using GtkGlExt, which forces the use of SDL
	      instead. By default if the GtkGL extension for Gtk is found
	      by configure, the GTK enabled GUI is built.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--disable-klash</term>
	  <listitem>
	    <para>
	      Disable support for Konqueror plugin. If
	      <emphasis>--enable--plugin</emphasis> is  specified, and
	      support for building KDE programs is found, Klash is
	      built by default. This option limits the plugin to only
	      the Mozilla/Firefox one.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-libsuffix</term>
	  <listitem>
	    <para>
	      /lib directory suffix (64,32,none=default). This is only
	      used by Klash.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-embedded</term>
	  <listitem>
	    <para>
	      Link to Qt-embedded, don't use X. This is only used by
	      Klash.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-qtopia</term>
	  <listitem>
	    <para>
	      Link to Qt-embedded, link to the Qtopia
	      Environment. This is only used by Klash.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-mac</term>
	  <listitem>
	    <para>
	      Link to Qt/Mac (don't use X). This is only used by
	      Klash. 
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-sdk-install</term>
	  <listitem>
	    <para>
	      Enable installing the libraries and headers as an SDK.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-testing</term>
	  <listitem>
	    <para>
	      Enable testing-specific methods.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-strict</term>
	  <listitem>
	    <para>
	      Turn on tons of GCC compiler warnings. By default only
	      <emphasis>-Wall</emphasis> is used with GCC.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-ghelp</term>
	  <listitem>
	    <para>
	      Enable support for the GNOME help system.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-dom</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      DOM based parser. This is the default.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-xmlreader</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      SAX based parser.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-dmalloc</term>
	  <listitem>
	    <para>
	      Enable support for the DMalloc memory debugging tool.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-i810-lod-bias</term>
	  <listitem>
	    <para>
	      Enable fix for Intel 810 LOD bias problem. Older versions
	      of libMesa on the Intel i810 or i815 graphics processor
	      need this flag or Gnash will core dump. This has been
	      fixed in newer versions (summer 2005) of libMesa.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-sound=gst|sdl</term>
	  <listitem>
	    <para>
	      Enable support for the a sound handing system. Currently
	      only <emphasis>sdl</emphasis> works sufficiently. This
	      is enabled by default when building Gnash.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-mp3-decoder=ffmpeg|mad</term>
	  <listitem>
	    <para>
	      Specified the MP3 decoder to use with sdl sound handler.
              Mixing this with --enable-sound=gst is invalid. Using
	      <emphasis>mad</emphasis> is the default decoder.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-renderer=opengl|cairo|agg</term>
	  <listitem>
	    <para>
	      Enable support for the a graphics backend. Currently
	      only <emphasis>opengl</emphasis> and
	      <emphasis>agg</emphasis> work sufficiently. OpenGL is
	      used when you have hardware accelerated graphics. AGG i
	      used when you don't have hardware accelerated
	      graphics. Typically most desktop machines have OpenGL
	      support, and most embedded systems don't. OpenGl is the
	      default when building Gnash.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
      
      <para>
	You can control other flags used for compiling using
	environment variables. Set these variables before configuring,
	and they will be used by the configure process instead of the
	default values.
      </para>

      <variablelist>
	<varlistentry>
	  <term>CXX</term>
	  <listitem>
	    <para>
	      C++ compiler command.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>LDFLAGS</term>
	  <listitem>
	    <para>
	      linker flags, e.g. -L[library directory] if you have libraries in a
	      nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CPPFLAGS</term>
	  <listitem>
	    <para>
	      C/C++ preprocessor flags, e.g. -I[headers directory] if you have
	      headers in a nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>CXXFLAGS</term>
	  <listitem>
	    <para>
	      C++ compiler flags.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect3>

    <sect3 id="crossconf">
      <title>Cross Compiling And Configuration</title>

      <para>
	To cross configure and compile Gnash, you first need to build
	a target system on your workstation. This includes cross
	compilers for the target architecture, and typically some
	system headers.	You will also need <emphasis>libxml2</emphasis>,
	<emphasis>libpng</emphasis>, <emphasis>libjpeg</emphasis>, 
	<emphasis>sdl</emphasis>, <emphasis>opengl</emphasis>, and
	<emphasis>ogg</emphasis> development packages built for the target
	system.
      </para>

      <para>
	If you need to build up a target system from scratch, there is
	a good document and shell script at this web site: <ulink
	type="http"
	url="http://frank.harvard.edu/~coldwell/toolchain/">
	http://frank.harvard.edu/~coldwell/toolchain/</ulink>.
      </para>

      <para>
	After I built up an ARM system in /usr/arm using the shell
	script from this web site, I then cross compiled all the
	other libraries I needed. The fun part is trying to get
	libMesa to cross compile, because it's not really set up for 
	that.  
      </para>

      <para>
	So to build for an ARM based system on an x86 based systems,
	configure like this: 
      </para>

      <programlisting>
	../gnash/configure --target=arm-unknown-linux-gnu --prefix=/usr/arm --host=arm-unknown-linux-gnu --build=i686-pc-linux-gnu --disable-plugin
      </programlisting>
      
      <para>
	The important options here are the ones that specify the
	architectures for the build.

	<variablelist>
	  <varlistentry>
	    <term>--target</term>
	    <listitem>
	      <para>
		The target architecture. This is the architecture the
		final executables are supposed to run on.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--host</term>
	    <listitem>
	      <para>
		The host architecture. This is the architecture the
		executables are supposed to run on. This is usually the
		same as <emphasis>--target</emphasis> except when building a
		compiler as a 
		Canadian Cross. This is when you build a cross
		compiler on a Unix machine, that runs on a
		<emphasis>win32</emphasis> machine, producing code for yet
		a third architecture, like the <emphasis>ARM</emphasis>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--build</term>
	    <listitem>
	      <para>
		This is the system this build is running on.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

    </sect3>
    
  </sect2>

  <sect2 id="building">
    <title>Building Gnash</title>

    <para>
      After managing to configure Gnash, building the code is
      simple. Gnash is built using <emphasis>GNU make</emphasis>.
    </para>

    <sect3 id="compile">
      <title>Compiling The Code</title>

      <para>
	After configuring, typing <emphasis>make</emphasis> will compile the
	code. No options are necessary. If desired, you can redefine
	the variables used by <emphasis>make</emphasis> on the command line
	when invoking the program. The few flags of interest are
	<emphasis>CFLAGS</emphasis> and	<emphasis>CXXFLAGS</emphasis>, often used to
	turn on debugging or turn off optimizing. Invoking make as in
	this example would build all the code with debugging turned
	on, and optimizing turned off. The default values for both of
	these variables is <emphasis>-O2 -g</emphasis>.

	<programlisting>
	  make CFLAGS=-g CXXFLAGS=-g
	</programlisting>
      </para>
      
      <para>
	If the compilation ends with an error, check the output of
	configure and make sure nothing required to build Gnash is
	missing.
      </para>
    </sect3>
    
    <sect3 id="processdoc">
      <title>Processing The Documentation</title>
      
      <para>
	By default, the documentation isn't built at all. It isn't
	even built when typing <emphasis>make install</emphasis> from the top
	level build directory. It's only built when specified with a
	specific target in the generated <emphasis>Makefile</emphasis> in the
	<emphasis>doc/C/</emphasis> sub-directory. All the documents are built in
	this directory when executing a <emphasis>make install</emphasis>.
      </para>
      
      <para>
	There is a target for each output format, <emphasis>make
	html</emphasis>, <emphasis>make pdf</emphasis>, <emphasis>make info</emphasis>,
	and <emphasis>make man</emphasis>. A higher level target, <emphasis>make
	alldocs</emphasis>, builds the four main formats for the
	documentation.
      </para>

      <para>
	Gnash also has support to use <ulink type="http"
	url="http://www.stack.nl/~dimitri/doxygen/index.html">
	Doxygen</ulink> to produce <emphasis>HTML</emphasis> pages documenting
	the internals of Gnash. While this is not necessarily
	internals documentation, it does give very useful information
	about all the files, the classes, a cross reference, and other
	data.
      </para>
      <para>
	You need to have Doxygen installed to produce these documents. If
	you do have it installed, typing <emphasis>make apidoc</emphasis> in
	the <emphasis>doc</emphasis> directory will make these documents under a
	sub directory of <emphasis>apidoc/html</emphasis>
      </para>
    </sect3>
  </sect2>

  <sect2 id="install">
    <title>Installation</title>
    
    <para>
      Gnash installs its libraries so they can be found in the
      runtime path for the Gnash executable. Unless the --prefix
      option is used at configuration time, the libraries get
      installed in /usr/local/lib. If you install Gnash in a
      non-standard location, you have to specify this runtime path
      by one of two means.
    </para>


    <para>
      The traditional way that works on all Unix platforms is to set
      the LD_LIBRARY_PATH environment variable to $prefix/lib. You
      can have multiple paths in this variable as long as they are
      seperated by a colon ":" character.
    </para>

    <para>
      For GNU/Linux systems, the custom path to the libraries can be
      added to the /etc/ld.so.conf file. After adding the custom
      path, then run (as root) the <emphasis>ldconfig</emphasis> command to
      update the runtime cache.
    </para>

    <sect3 id="codeinstall">
      <title>What Code Gets Installed and Where</title>

      <para>
	Several libraries get installed, as well as the three
	executables. All the libraries, <emphasis>libbase, libgeometry,
	libgbackend, libserver, and libmozsdk</emphasis> get installed in the
	directory pointed to by <emphasis>$prefix</emphasis>. This variable is
	set by the <emphasis>--prefix</emphasis> option at configure time, and
	if not specified, it defaults to <emphasis>/usr/local</emphasis>. All
	the libraries get installed in <emphasis>$prefix/lib</emphasis> where
	most packages also install their libraries.
      </para>
      <para>
	The plugin gets installed in the plugins directory of the
	version of the<emphasis>Firefox</emphasis> or <emphasis>Mozilla</emphasis> you
	have the development packaged installed for. For builds from
	Mozilla CVS, the default installation directory is
	<emphasis>/usr/local/lib/firefox-[version
	number]/plugins/</emphasis>. The default system directory used
	when installing packages is
	<emphasis>/usr/lib/mozilla/plugins</emphasis>. Note that you have to be
	<emphasis>root</emphasis> to install files in a system directory. For
	some reason when the plugin is installed in the users
	<emphasis>$HOME/.mozilla/plugins</emphasis> or
	<emphasis>$HOME/.firefox/plugins</emphasis> directory, unresolved
	symbols from deep within Firefox appear.
      </para>

      <para>
	The executables get installed in a <emphasis>bin</emphasis> directory of
	the directory specified by <emphasis>$prefix</emphasis>. Once again,
	this path defaults to <emphasis>/usr/local/bin</emphasis> if a special
	prefix wasn't configured in.
      </para>

      <para>
	If using a single file-system <emphasis>NFS</emphasis>mounted to
	multiple platforms, you can specify an additional option,
	<emphasis>--exec-prefix</emphasis>. This is where all the platform
	dependent executables and libraries can get installed.
      </para>
    </sect3>

    <sect3 id="docinstall">
      <title>What Documentation Gets Installed and Where</title>

      <para>
	The documentation only installs when GNOME Help support is
	enabled by using <emphasis>--enable-ghelp</emphasis>. Because GNOME
	help files get installed in a system directory when building
	from source, you need to either change the permissions on the
	destination directory, or do the install as <emphasis>root</emphasis>.
	The default directory for GNOME Help files is:
	<emphasis>/usr/local/share/gnash/doc/gnash/C/</emphasis>. 
      </para>
      <para>
	A configuration file in the Gnash source tree,
	<emphasis>doc/C/gnash.omf</emphasis> is used to specify under which
	menu item Gnash is listed in the GNOME Help system.
      </para>

    </sect3>
  </sect2>
</sect1>


