<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
  <!ENTITY legal SYSTEM "legal.xml">
  <!ENTITY fdl-app SYSTEM "fdl-appendix.xml">
  <!ENTITY appversion "0.7">
  <!ENTITY manrevision "0.7">
  <!ENTITY date "December 2005">
  <!ENTITY app "<application>Gnash</application>">
  <!ENTITY appname "Gnash">
  <!ENTITY version "0.7">
 ]
>

 <!-- =============Document Header ============================= -->
 <article id="index" lang="en">
<!-- please do not change the id; for translations, change lang to -->
<!-- appropriate code -->
   <articleinfo>
     <title>&app; Manual V&manrevision;</title>
     <copyright>
       <year>2005</year>
       <holder>Rob Savoye</holder>
     </copyright>
<!-- translators: uncomment this:

  <copyright>
   <year>2005</year>
   <holder>ME-THE-TRANSLATOR (Latin translation)</holder>
  </copyright>

   -->
<!-- An address can be added to the publisher information.  If a role is 
     not specified, the publisher/author is the same for all versions of the 
     document.  -->
    <publisher> 
      <publishername> GNOME Documentation Project </publishername> 
    </publisher> 

<!-- 
      Copyright (c)  2005, Free Software Foundation, Inc.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.2
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
      Texts.  A copy of the license is included in the section entitled "GNU
      Free Documentation License".
-->

   &legal;

   <!-- This file  contains link to license for the documentation (GNU FDL), and 
        other legal stuff such as "NO WARRANTY" statement. Please do not change 
	any of this. -->

    <authorgroup> 
      <author> 
	<firstname>Rob</firstname> 
	<surname>Savoye</surname> 
	<affiliation> 
	  <address>
	    <email>rob@senecass.com</email>
	  </address> 
	</affiliation> 
      </author> 

<!-- This is appropriate place for other contributors: translators,
      maintainers,  etc. Commented out by default.
       <othercredit role="translator">
	<firstname>Latin</firstname> 
	<surname>Translator 1</surname> 
	<affiliation> 
	  <orgname>Latin Translation Team</orgname> 
	  <address> <email>translator@gnome.org</email> </address> 
	</affiliation>
	<contrib>Latin translation</contrib>
      </othercredit>
-->
    </authorgroup>

    <revhistory>
      <revision> 
	<revnumber>&appname; Manual V&manrevision;</revnumber> 
	<date>&date;</date>
	<revdescription> 
	  <para role="author">Rob Savoye
	    <email>rob@senecass.com</email>
	  </para>
	  <para role="publisher">Free Software Foundation</para>
	</revdescription> 
      </revision> 
    </revhistory> 

    <releaseinfo>This manual describes version &appversion; of &appname;.
    </releaseinfo>
   </articleinfo>

  <indexterm zone="index"> 
    <primary>Gnash</primary> 
  </indexterm>

<!-- ============= Document Body ============================= -->

<!-- ============= Introduction ============================== -->
  <sect1 id="intro"> <title>Introduction</title>
    <para>
      Gnash is a Free Flash movie player, which works either
      standalone, or as a Firefox/Mozilla plugin.
    </para>

    <sect2 id="Gnash Overview">
      <title>Gnash Overview</title>
      
      <para>
	Currently Gnash only has working support for the standalone
	Flash movie player. Development of the plugin is under heavy
	development at this time. The only difference between the plugin
	and the standalone player is that one is rendered in the browser
	window, instead of a separate window.
      </para>
      
      <para>
	Gnash currently has two backends for graphic display. The
	only one currently used by Gnash is the OpenGL one. There is
	an XBox backend, but as I don't own an XBox, I can't verify if
	it even works anymore.
      </para>

      <para>
	The plugin uses the OpenGL backend still, it's just captured
	within the window allocated for the plugin's display within the
	browser window. The plugin code is mostly the same as the
	standalone except for event handling and the drawing window.
      </para>
      
      <para>
	Gnash supports the current Shockwave format, version 7. While
	all the ActionScript classes exist, not all of the methods
	defined by the SWF format documentation are implemented
	however, so not all flash movies work 100% if they utilize any
	of the unimplemented methods. This is one of the areas to work
	on to achieve full version 7 compliance.
      </para>

      <para>
	Included in the Gnash is an XML based messaging system, as
	specified in the Flash specification. This lets a flash movie
	communicate over a TCP/IP socket, and parse the incoming XML
	message. This lets a movie be a remote control for other
	devices or applications.
      </para>


    </sect2>
  </sect1>
    
  <sect1 id="usage">
    <title>Gnash Usage</title>
    
    <para>
      Currently only the standalone player is fully operational. You
      can execute any flash movie from the command line by just
      supplying the file name. No command line options are required to
      just play the movie using the default actions. So if you type:
    </para>
      

    <para>
      <code>gnash samples/car_smash.swf</code>
    </para>

    <para>
      It'll create a window and play this movie. In this case it's a
      simple animation of a car driving and swerving and finally
      crashing.
      <mediaobject>
	<imageobject>
	  <imagedata align="center" fileref="images/car_crash.png"/>
	</imageobject>
      </mediaobject>
      
    </para>

    <sect2 id="options">
      <title>Gnash Command Line Options</title>

      <para>
	While by default no options are necessary, there are options
	that can be used to change <code>gnash's</code> basic
	behavior.
      </para>
      
      <para>
	gnash [options] file
      </para>
      
      <variablelist>
	<varlistentry>
	  <term>-h</term>
	  <listitem>
	    <para>
	      Print usage info.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-s factor</term>
	  <listitem>
	    <para>
	      Scale the movie up/down by the specified factor.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-c</term>
	  <listitem>
	    <para>
	      Produce a core file instead of letting SDL trap it. By
	      default, SDL traps all signals, but sometimes a core file
	      is desired to assist with debugging.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-d num</term>
	  <listitem>
	    <para>
	      Number of milli-seconds to delay in main loop. The main
	      loop polls continuously with a delay to adjust how long
	      <code>gnash</code> sleeps between iterations of the
	      loop. The smaller the number, the higher the CPU load
	      gets, and of course, you get more iterations of the main
	      command loop.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-p</term>
	  <listitem>
	    <para>
	      Run full speed (no sleep) and log frame rate.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-a</term>
	  <listitem>
	    <para>
	      Turn anti-aliasing on/off.  (obsolete)
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-v</term>
	  <listitem>
	    <para>
	      Be verbose; i.e. print debug messages to stdout
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-va</term>
	  <listitem>
	    <para>
	      Be verbose about movie Actions. 
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-vp</term>
	  <listitem>
	    <para>
	      Be verbose about parsing the movie. Warning, this can
	      generate a lot of text, and can affect the performance of
	      the movie you are playing.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-ml bias</term>
	  <listitem>
	    <para>
	      Specify the texture LOD bias (float, default is -1) This
	      effects the fuzziness of small objects, especially small
	      text.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-e</term>
	  <listitem>
	    <para>
	      Use SDL Event thread. This uses a separate thread to make
	      the event loop more event driven than polling. This can
	      improve performance for some types of movies.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-1</term>
	  <listitem>
	    <para>
	      Play once; exit when/if movie reaches the last
	      frame. This is the default.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-r [0|1|2]</term>
	  <listitem>
	    <para>
	      0 disables rendering and sound (good for batch tests)
	    </para>
	    <para>
	      1 enables rendering and sound (default setting)
	    </para>
	    <para>
	      2 enables rendering and disables sound.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-t sec</term>
	  <listitem>
	    <para>
	      Timeout and exit after the specified number of
	      seconds. This is useful for movies that repeat
	      themselves.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-b bits</term>
	  <listitem>
	    <para>
	      Bit depth of output window (16 or 32, default is 16)
	    </para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
    </sect2>

    <sect2 id="keys">
      <title>Gnash Interactive Control Keys</title>

      <para>
	While a movie is playing, there are several control
	keys. These can be used to step through frames, pause the
	playing, and other actions.
      </para>
      
      <variablelist>
	<varlistentry>
	  <term>CTRL-Q</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-W</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>ESC</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-P</term>
	  <listitem>
	    <para>
	      Toggle Pause
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-R   </term>
	  <listitem>
	    <para>
	      Restart the movie
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-[ or kp-</term>
	  <listitem>
	    <para>
	      Step back one frame
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-] or kp+</term>
	  <listitem>
	    <para>
	      Step forward one frame
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-A</term>
	  <listitem>
	    <para>
	      Toggle anti-aliasing (doesn't work)
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-T</term>
	  <listitem>
	    <para>
	      Debug.  Test the set_variable() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-G</term>
	  <listitem>
	    <para>
	      Debug.  Test the get_variable() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-M</term>
	  <listitem>
	    <para>
	      Debug.  Test the call_method() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-B</term>
	  <listitem>
	    <para>
	      Toggle background color
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="build">
    <title>Building From Source</title>

    <para>
    </para>

    <sect2 id="depend">
      <title>Dependancies</title>

       <para>
	Gnash has dependancies on other packages. When installing
	from a packaged release file (rpm, deb, whatever), you'll need
	to install the development versions to get the tools used to
	compile Gnash.
      </para>

      <sect3 id="opengl">
	<title>OpenGL</title>
	<para>
	  Gnash uses OpenGL for rendering the images. OpenGL is a 3D
	  graphics package that support hardware acceleration. You can
	  get the free version of OpenGL at this link: 
	  <ulink type="http" url="http://www.mesa3d.org">http://www.mesa3d.org</ulink> 
	</para>
      </sect3>

      <sect3 id="sdl">
	<title>SDL</title>
	<para>
	  The Simple DirectMedia Layer is a cross-platform multimedia
	  library designed to provide low level access to audio,
	  keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D
	  video framebuffer. You can get SDL from this link:
	  <ulink type="http" url="http://www.libsdl.org">http://www.libsdl.org</ulink>  
	</para>
      </sect3>

      <sect3 id="libxml2">
	<title>libxml2</title>
	<para>
	  Libxml2 is the GNOME XML parser library. This is used when
	  Gnash is configured with XL support. Libxml2 is used to
	  parse any incoming messages when using the XML or XMLSocket
	  ActionScript classes. You can get libxml2 from this link: 
	  <ulink type="http" url="http://xmlsoft.org">http://xmlsoft.org</ulink> 
	</para>
      </sect3>

      <sect3 id="mozilla">
	<title>Mozilla/Firefox</title>
	<para>
	  To build the plugin, you need Mozilla/Firefox. You probably
	  already have Firefox or Mozilla installed on your
	  computer. If not, you can get Firefox from this link: 
	  <ulink type="http" url="http://www.mozilla.org">http://www.mozilla.org</ulink> 
	</para>
      </sect3>

    </sect2>

    <sect2 id="configure">
      <title>Configuring</title>
      
      <para>
	Gnash uses GNU Autoconf (<ulink type="http"
	url="http://www.gnu.org/software/autoconf/">
	http://www.gnu.org/software/autoconf</ulink>) for
	configuration. All the standard configure options apply. 
      </para>

      <para>
	By default, `make install' will install all the files in
	`/usr/local/bin', `/usr/local/lib' etc.  You can specify
	an installation prefix other than `/usr/local' using `--prefix',
	for instance `--prefix=$HOME'.
      </para>

      <para>
	Occasionally the default paths for a development package
	aren't correct. There is a series of options that can be used
	to adjust these paths to your own setup. By default, Gnash
	will look in all the standard places for these tools.
      </para>
      
      <variablelist>
	<varlistentry>
	  <term>--x-includes=DIR</term>
	  <listitem>
	    <para>
	      X include files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--x-libraries=DIR</term>
	  <listitem>
	    <para>
	      X library files are in DIR.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml=PFX</term>
	  <listitem>
	    <para>
	      Prefix to where libxml is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-libraries=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-libxml-includes=DIR</term>
	  <listitem>
	    <para>
	      Directory where libxml header files are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox=PFX</term>
	  <listitem>
	    <para>
	      Prefix where firefox is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox-libraries=DIR</term>
	  <listitem>
	    <para>
	      Directory where firefox library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-firefox-includes=DIR</term>
	  <listitem>
	    <para>
	      Directory where firefox header files are installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-docbook=DIR</term>
	  <listitem>
	    <para>
	      Directory where the DocBook stylesheets are installed.	      
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl-prefix=PFX</term>
	  <listitem>
	    <para>
	      Prefix where SDL is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl_mixer-incl</term>
	  <listitem>
	    <para>
	      Directory where sdl_mixer header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-sdl_mixer-lib</term>
	  <listitem>
	    <para>
	      Directory where sdl_mixer library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-incl</term>
	  <listitem>
	    <para>
	      Directory where zlib header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-zlib-lib</term>
	  <listitem>
	    <para>
	      Directory where zlib library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-incl</term>
	  <listitem>
	    <para>
	      Directory where jpeg header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-jpeg-lib</term>
	  <listitem>
	    <para>
	      Directory where jpeg library is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-incl</term>
	  <listitem>
	    <para>
	      Directory where png header is installed.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--with-png-lib</term>
	  <listitem>
	    <para>
	      Directory where png library is installed.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>

      <para>
	In addition to being able to specify your the directories for
	various sub components, there are also some switches that can
	be used at configuration time to enable or disable various
	featires of Gnash.
      </para>

      <variablelist>
	<varlistentry>
	  <term>--disable-xml</term>
	  <listitem>
	    <para>
	      Disable support for XML. The default is to support
	      XML. 
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>--enable-dom</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      DOM based parser. This is the default.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-xmlreader</term>
	  <listitem>
	    <para>
	      When using the XML library, parse the messages using a
	      SAX based parser.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-plugin</term>
	  <listitem>
	    <para>
	      Enable support for being a plugin. This is the default.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>--enable-dmalloc</term>
	  <listitem>
	    <para>
	      Enable support for the DMalloc memory debugging tool.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>--enable-i810-lod-bias</term>
	  <listitem>
	    <para>
	      Enable fix for Intel 810 LOD bias problem. Older version
	      of libMesa on the Intel i810 or i815 graphics processor
	      need this flag or Gnash will core dump. This has been
	      fixed in newer versions (summer 2005) of libMesa.
	    </para>
	  </listitem>
	</varlistentry>


      </variablelist>
      
      <para>
	You can control other flags used for compiling using
	environment variables. Set these variables before configuring,
	and they will be used by the configure process instead of the
	default values.
      </para>

      <variablelist>
	<varlistentry>
	  <term>CXX</term>
	  <listitem>
	    <para>
	      C++ compiler command.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>LDFLAGS</term>
	  <listitem>
	    <para>
	      linker flags, e.g. -L[library directory] if you have libraries in a
	      nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CPPFLAGS</term>
	  <listitem>
	    <para>
	      C/C++ preprocessor flags, e.g. -I[headers directory] if you have
	      headers in a nonstandard directory.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>CXXFLAGS</term>
	  <listitem>
	    <para>
	      C++ compiler flags.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </sect2>

    <sect2 id="install">
      <title>Installation</title>
      
      <para>
	Gnash installs it's libraries so they can be found in the
	runtime path for the Gnash executable. Unless the --prefix
	option is used at configuration time, the libraries get
	installed in /usr/local/lib. If you install Gnash in a
	non-standard location, you have to specify this runtime path
	by one of two means.
      </para>


      <para>
	The traditional way that works on all Unix platforms is to set
	the LD_LIBRARY_PATH environment variable to $prefix/lib. You
	can have multiple paths in this variable as long as they are
	seperated by a colon ":" character.
      </para>

      <para>
	For GNU/Linux systems, the custom path to the libraries can be
	added to the /etc/ld.so.conf file. After adding the custom
	path, then run (as root) the <code>ldconfig</code> command to
	update the runtime cache.
      </para>

    </sect2>

  </sect1>
    
  <sect1 id="code">
    <title>Code Overview</title>

    <para>
      The top level of Gnash has three libraries, <code>libbase</code>,
      <code>libgeometry</code>, and <code>libserver</code>. There are
      two utility programs included for debug parsing and processing
      of Flash movie files to test the Actionscript interpreter. There
      is also a standalone flash movie player.
    </para>
    
    <sect2 id="The Libraries">
      <title>The Libraries</title>
      
      <sect3 id="libbase">
	<title>libbase</title>
	
	<para>
	  Libbase contains support classes used by the rest of the
	  code. Among these classes is a small and efficient STL library
	  clone that uses smart pointers. This helps isolate the
	  problems that arise when using non GNU C Compilers that aren't
	  compliant with the ANSI C++ standard.
	</para>

	<para>
	  Gnash makes heavy use of smart pointers, so memory allocations
	  are freed up automatically by the interpreter.
	</para>
	
      </sect3>
      
      <sect3 id="libgeometry">
	<title>libgeometry</title>
	
	<para>
	  Libgeometry contains code for device independant graphics routines.
	</para>
	
      </sect3>

      <sect3 id="libserver">
	<title>libserver</title>
	
	<para>
	  Libserver is the guts of the interpreter itself. This is where
	  all the new ActionScript classes get defined, and the main
	  code for the interpreter lives. 
	</para>
      </sect3>
    </sect2>

    <sect2 id="apps">
      <title>The Applications</title>
      
      <para>
	There are currently a few standalone programs in Gnash to
	assist with Gnash development, and to play a flash movie.
      </para>

      <sect3 id="Gnash">
	<title>Gnash</title>
	
	<para>
	  This is the standalone OpenGL backend used to play
	  movies. There are several command line options and keyboard
	  control keys used by Gnash that <link linkend="usage"> are
	  documented here.</link>
	</para>

      </sect3>

      <sect3 id="parser">
	<title>Gparser</title>
	
	<para>
	  Gparser use the Gnash parser to dissamble the flash
	  movie, and dumps the object types, the depth, and other
	  information to make sure Gnash is parsing the file
	  correctly.
	</para>

      </sect3>
      <sect3 id="processor">
	<title>Gprocesser</title>
	
	<para>
	  Gprocesser is used to print out the actions (using the -va
	  option) or the parsing (using the -vp option) of a flash
	  movie. It is also used to produce the <code>.gsc</code>
	  files that Gnash uses to cache data, thereby speeding up the
	  loading of files.
	</para>

      </sect3>
    </sect2>
    
    <sect2 id="plugin">
      <title>The Plugin</title>

      <para>
	The plugin is designed to work within Mozilla or Firefox. It
	currently doesn't use the latest plugin API additions, so it
	should work in older versions as well. The plugin uses the
	Mozilla plugin API to be cross platform, and portable.
      </para>

      <para>
	One future thought for the plugin is to use the new Firefox
	1.5 or greater version of Firefox. This version has added a
	drawable canvas window that support hardware acceleration, and
	is desgined to support things like rendering diretly into the
	canvas without needing OpenGL. 
      </para>

    </sect2>

  </sect1>
  
<!-- ============= Authors ================================ -->

  <sect1 id="authors">
    <title>Authors</title>
    <para>
      <application>Gnash</application> is maintained by Rob Savoye
      <email>rob@senecass.com</email>. Please send all comments,
      suggestions, and bug reports to <email>gnash@gnu.org</email>, or
      use the Bug Tracking system on The <ulink type="http"
      url="http://www.fsf.org">Free Software Foundation's</ulink> Savannah host.
      <ulink type="http" url="http://savannah.gnu.org/projects/gnash">
      http://savannah.gnu.org/projects/gnash</ulink>
      I am available for consulting on a variety of renewable energy
      and open source technologies. More details at <ulink type="http"
      url="http://www.senecass.com">http://www.senecass.com</ulink>
   </para>

   <para>
     The following people all contributed code to GameSWF, which was
     the original code base for Gnash. I was also a GameSWF
     contributor. The primary author of GameSWF is Thatcher Ulrich
     <email>tu@tulrich.com</email>. Other individuals that contributed code are:
     Mike Shaver, Thierry Berger-Perrin, Ignacio Castaño, Willem
     Kokke, Vitaly Alexeev, Alexander Streit.
    </para>

  </sect1>

  <!-- ============= Application License ============================= -->

  &fdl-app;

</article>
