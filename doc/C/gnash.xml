<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
  <!ENTITY legal SYSTEM "legal.xml">
  <!ENTITY fdl-app SYSTEM "fdl-appendix.xml">
  <!ENTITY appversion "0.7">
  <!ENTITY manrevision "0.3">
  <!ENTITY date "March 2006">
  <!ENTITY app "<application>Gnash</application>">
  <!ENTITY appname "Gnash">
  <!ENTITY version "0.7">
  <!ENTITY appendix SYSTEM "appendix.xml">
  <!ENTITY sources SYSTEM "sources.xml">
  <!ENTITY internals SYSTEM "internals.xml">
  <!ENTITY asaccessibility SYSTEM "accessibility.xml">
  <!ENTITY asarray SYSTEM "array.xml">
  <!ENTITY asboolean SYSTEM "boolean.xml">
  <!ENTITY asbutton SYSTEM "button.xml">
  <!ENTITY ascamera SYSTEM "camera.xml">
  <!ENTITY ascolor SYSTEM "color.xml">
  <!ENTITY ascontextmenu SYSTEM "contextmenu.xml">
  <!ENTITY ascustomactions SYSTEM "customactions.xml">
  <!ENTITY asdate SYSTEM "date.xml">
  <!ENTITY aserror SYSTEM "error.xml">
  <!ENTITY asfunction SYSTEM "function.xml">
  <!ENTITY askey SYSTEM "key.xml">
  <!ENTITY asloadvars SYSTEM "loadvars.xml">
  <!ENTITY aslocalconnection SYSTEM "localconnection.xml">
  <!ENTITY asmath SYSTEM "math.xml">
  <!ENTITY asmicrophone SYSTEM "microphone.xml">
  <!ENTITY asmouse SYSTEM "mouse.xml">
  <!ENTITY asmovieclip SYSTEM "movieclip.xml">
  <!ENTITY asmoviecliploader SYSTEM "moviecliploader.xml">
  <!ENTITY asnetconnection SYSTEM "netconnection.xml">
  <!ENTITY asnetstream SYSTEM "netstream.xml">
  <!ENTITY asnumber SYSTEM "number.xml">
  <!ENTITY asobject SYSTEM "object.xml">
  <!ENTITY asselection SYSTEM "selection.xml">
  <!ENTITY assharedobject SYSTEM "sharedobject.xml">
  <!ENTITY assound SYSTEM "sound.xml">
  <!ENTITY asstage SYSTEM "stage.xml">
  <!ENTITY asstring SYSTEM "string.xml">
  <!ENTITY assystem SYSTEM "system.xml">
  <!ENTITY astextfield SYSTEM "textfield.xml">
  <!ENTITY astextformat SYSTEM "textformat.xml">
  <!ENTITY astextsnapshot SYSTEM "textsnapshot.xml">
  <!ENTITY asvideo SYSTEM "video.xml">
  <!ENTITY asxmlnode SYSTEM "xmlnode.xml">
  <!ENTITY asxml SYSTEM "xml.xml">
  <!ENTITY asxmlsocket SYSTEM "xmlsocket.xml">
  <!ENTITY amf SYSTEM "amf.xml">
  <!ENTITY plugin SYSTEM "plugin.xml">
  <!ENTITY logging SYSTEM "logging.xml">
  <!ENTITY opcodes SYSTEM "opcodes.xml">
  <!ENTITY rtmp SYSTEM "rtmp.xml">
 ]
>

 <!-- =============Document Header ============================= -->
 <article id="index" lang="en">
<!-- please do not change the id; for translations, change lang to -->
<!-- appropriate code -->
   <articleinfo>
     <title>&app; Manual V&manrevision;</title>
     <copyright>
       <year>2005, 2006</year>
       <holder>Rob Savoye</holder>
     </copyright>
<!-- translators: uncomment this:

  <copyright>
   <year>2005, 2006</year>
   <holder>ME-THE-TRANSLATOR (Latin translation)</holder>
  </copyright>

   -->
<!-- An address can be added to the publisher information.  If a role is 
     not specified, the publisher/author is the same for all versions of the 
     document.  -->
    <publisher> 
      <publishername> GNOME Documentation Project </publishername> 
    </publisher> 

<!-- 
      Copyright (c)  2005, 2006, Free Software Foundation, Inc.
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.2
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
      Texts.  A copy of the license is included in the section entitled "GNU
      Free Documentation License".
-->

   &legal;

   <!-- This file  contains link to license for the documentation (GNU FDL), and suzuka.arc.nasa.gov
        other legal stuff such as "NO WARRANTY" statement. Please do not change 
	any of this. -->

    <authorgroup> 
      <author> 
	<firstname>Rob</firstname> 
	<surname>Savoye</surname> 
	<affiliation> 
	  <address>
	    <email>rob@senecass.com</email>
	  </address> 
	</affiliation> 
      </author> 

<!-- This is appropriate place for other contributors: translators,
      maintainers,  etc. Commented out by default.
       <othercredit role="translator">
	<firstname>Latin</firstname> 
	<surname>Translator 1</surname> 
	<affiliation> 
	  <orgname>Latin Translation Team</orgname> 
	  <address> <email>translator@gnome.org</email> </address> 
	</affiliation>
	<contrib>Latin translation</contrib>
      </othercredit>
-->
    </authorgroup>

    <revhistory>
      <revision> 
	<revnumber>&appname; Manual V&manrevision;</revnumber> 
	<date>&date;</date>
	<revdescription> 
	  <para role="author">Rob Savoye
	    <email>rob@senecass.com</email>
	    Updated for the alpha release.
	  </para>
	  <para role="publisher">Free Software Foundation</para>
	</revdescription> 
      </revision> 
    </revhistory> 

    <releaseinfo>This manual describes version &appversion; of &appname;.
    </releaseinfo>
   </articleinfo>

  <indexterm zone="index"> 
    <primary>Gnash</primary> 
  </indexterm>

<!-- ============= Document Body ============================= -->

<!-- ============= Introduction ============================== -->
  <sect1 id="intro"> <title>Introduction</title>
    <para>
      Gnash is a Free Flash movie player, which works either
      standalone, or as a Firebox/Mozilla plugin.
    </para>

    <sect2 id="Gnash Overview">
      <title>Gnash Overview</title>

      <para>
	Gnash is originally based on the code of GameSWF, by Thatcher 
	Ulrich. GameSWF was the most advanced of the free flash movie player
	projects, and implements a fairly broad set of Flash Format
	v7 compliance. GameSWF was unsupported public domain software though,
	and not really setup to be an industrial strength project that could
	be used by everyone that uses Firefox. So in early December of 2005,
	GameSWF was forked. After being rearranged in GNU project style,
	development of the plugin was started.
      </para>
      
      <para>
	Gnash works as standalone player, as a Mozilla Firefox plugin,
	and as a Konqueror plugin, called Klash. The plugins use the
	standalone player for processing, but embed the output into
	the browser.
      </para>

      <para>
	Currently Gnash uses OpenGL to get a high quality rendered
	image. There are plans to write a Cairo back-end to give Gnash
	a performance boost on graphics processors without 3D hardware 
	acceleration, and to run in a framebuffer, with no windowing
	system at all.
      </para>

<!--
      <para>
	Gnash currently has two back-ends for graphic display. The
	only one currently used by Gnash is the OpenGL one. There is
	an XBox back-end, but as I don't own an XBox, I can't verify if
	it even works anymore.
      </para>
-->

      <para>
	Included in the Gnash is an XML based messaging system, as
	specified in the Flash specification. This lets a flash movie
	communicate over a TCP/IP socket, and parse the incoming XML
	message. This lets a movie be a remote control for other
	devices or applications.
      </para>

      <sect3 id="pluginintro">
	<title>Plugin Overview</title>
	<para>
	  The plugin currently works by creating a new window in the
	  standalone player that is connected to the browser window in
	  Firefox.
	</para>
	
	<para>
	  All movies are downloaded to /tmp, and played from there. Many web
	  pages have IE specific Javascript that fail to launch with Firefox, so
	  it never loads the plugin.
	</para>
      </sect3>
      
      <sect3 id="playerintro">
	<title>Standalone Player Overview</title>
	<para>
	  The standalone player supports both SDL and GTK2. The SDL
	  support is more portable, and the GTK support makes it better
	  integrated into Firefox as a plugin. When using GTK, there
	  is a new menu activated by a right-button mouse click that
	  can be used to control the movie.
	</para>
      </sect3>

      <sect3 id="flashsupport">
	<title>Flash Support:</title>

	<para>
	  Many of the movies I come across while randomly web surfing
	  play fine in Gnash. Gnash supports the majority of Flash
	  opcodes up to SWF version 7, and a wide sampling of
	  ActionScript classes for SWF version 7. All the core ones
	  are implemented, and many of the newer ones work, but may be
	  missing some of the methods. All unimplemented opcodes and
	  ActionScript classes and methods print a warning when using
	  -v with gnash or gprocessor. Using gprocessor -v is a quick
	  way to see why a movie isn't playing correctly.
	</para>

	<para>
	  There are plans to work towards supporting all the SWF
	  version 8 or greater opcodes, as well as as implementing the
	  missing methods and ActionScript classes. During the first
	  few months of Gnash's existence as a project, most of the
	  focus has been towards portability issues, and getting the
	  plugin to work. Now that the plugin works, more focus will
	  be spent on catching up to full compliance with version 7
	  and beyond.

	</para>
	<para>
	  Currently implemented ActionScript classes are: Array,
	  Boolean, Date, Key, Math, Mouse, MovieClip, Number, Object,
	  Sound, String, XML, XMLNode, XMLSocket.
	</para>

	<para>
	  Partially implemented classes are: MovieClipLoader,
	  NetConnection, LocalConnection, TextField, TextFormat.
	</para>

	<para>
	  Unimplemented classes are: Accessibility, Error, Function,
	  LoadVars, Microphone, NetStream, Selection, SharedObject,
	  Stage, System, Button, Camera, Color, ContextMenu,
	  CustomActions, Video 
	</para>
	<para>
	  Unimplemented Opcodes are: Throw, Implements, Extends,
	  enum_object, Try, new_method, enum_object, md length, md
	  substring, md chr, delete, get target 
	</para>
	<para>
	  There is currently no FLV video or more than minimal AMF
	  data support, or loading of external jpegs.
	</para>
      </sect3>

    </sect2>
  </sect1>
    
  <sect1 id="usage">
    <title>Gnash Usage</title>
    
    <para>
      Currently only the standalone player is fully operational. You
      can execute any flash movie from the command line by just
      supplying the file name. No command line options are required to
      just play the movie using the default actions. So if you type:
    </para>
      

    <para>
      <code>gnash samples/car_smash.swf</code>
    </para>

    <para>
      It'll create a window and play this movie. In this case it's a
      simple animation of a car driving and swerving and finally
      crashing.
      <mediaobject>
	<imageobject>
	  <imagedata align="center" fileref="images/car_crash.png"/>
	</imageobject>
      </mediaobject>
      
    </para>

    <sect2 id="options">
      <title>Gnash Command Line Options</title>

      <para>
	While by default no options are necessary, there are options
	that can be used to change <code>Gnash's</code> basic
	behavior.
      </para>
      
      <para>
	gnash [options] file
      </para>
      
      <variablelist>
	<varlistentry>
	  <term>-h</term>
	  <listitem>
	    <para>
	      Print usage info.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-s factor</term>
	  <listitem>
	    <para>
	      Scale the movie up/down by the specified factor.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-c</term>
	  <listitem>
	    <para>
	      Produce a core file instead of letting SDL trap it. By
	      default, SDL traps all signals, but sometimes a core file
	      is desired to assist with debugging.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-d num</term>
	  <listitem>
	    <para>
	      Number of milli-seconds to delay in main loop. The main
	      loop polls continuously with a delay to adjust how long
	      <code>gnash</code> sleeps between iterations of the
	      loop. The smaller the number, the higher the CPU load
	      gets, and of course, you get more iterations of the main
	      command loop.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-p</term>
	  <listitem>
	    <para>
	      Run full speed (no sleep) and log frame rate.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-a</term>
	  <listitem>
	    <para>
	      Turn anti-aliasing on/off.  (obsolete)
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-v</term>
	  <listitem>
	    <para>
	      Be verbose; i.e. print debug messages to stdout
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-va</term>
	  <listitem>
	    <para>
	      Be verbose about movie Actions. 
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-vp</term>
	  <listitem>
	    <para>
	      Be verbose about parsing the movie. Warning, this can
	      generate a lot of text, and can affect the performance of
	      the movie you are playing.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-ml bias</term>
	  <listitem>
	    <para>
	      Specify the texture LOD bias (float, default is -1) This
	      effects the fuzziness of small objects, especially small
	      text.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>-w</term>
	  <listitem>
	    <para>
	      Write a debug log called gnash-dbg.log. This gets a
	      record of all the debug messages whether they are printed
	      to the screen or not.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>-j</term>
	  <listitem>
	    <para>
	      Specify the width of the window. This is mostly used
	      only by the plugin.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>-k</term>
	  <listitem>
	    <para>
	      Specify the height of the window. This is mostly used
	      only by the plugin.
	    </para>
	  </listitem>
	</varlistentry>
<!--	
	<varlistentry>
	  <term>-e</term>
	  <listitem>
	    <para>
	      Use SDL Event thread. This uses a separate thread to make
	      the event loop more event driven than polling. This can
	      improve performance for some types of movies.
	    </para>
	  </listitem>
	</varlistentry>
-->
	<varlistentry>
	  <term>-1</term>
	  <listitem>
	    <para>
	      Play once; exit when/if movie reaches the last
	      frame. This is the default.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-r [0|1|2|3]</term>
	  <listitem>
	    <para>
	      0 disables rendering and sound (good for batch tests)
	    </para>
	    <para>
	      1 enables rendering and disables sound (default setting)
	    </para>
	    <para>
	      2 enables sound and disables rendering 
	    </para>
	    <para>
	      3 enables rendering and sound
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-t sec</term>
	  <listitem>
	    <para>
	      Timeout and exit after the specified number of
	      seconds. This is useful for movies that repeat
	      themselves.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-x id</term>
	  <listitem>
	    <para>
	      This option is only used by Mozplugger when running the
	      standalone player from within a web browser like
	      Firefox. This specifies the X11 window ID to display
	      in.
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>-b bits</term>
	  <listitem>
	    <para>
	      Bit depth of output window (16 or 32, default is 16)
	    </para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
    </sect2>

    <sect2 id="keys">
      <title>Gnash Interactive Control Keys</title>

      <para>
	While a movie is playing, there are several control
	keys. These can be used to step through frames, pause the
	playing, and other actions.
      </para>
      
      <variablelist>
	<varlistentry>
	  <term>CTRL-Q</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-W</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>ESC</term>
	  <listitem>
	    <para>
	      Quit/Exit
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-P</term>
	  <listitem>
	    <para>
	      Toggle Pause
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-R   </term>
	  <listitem>
	    <para>
	      Restart the movie
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-[ or kp-</term>
	  <listitem>
	    <para>
	      Step back one frame
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-] or kp+</term>
	  <listitem>
	    <para>
	      Step forward one frame
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-A</term>
	  <listitem>
	    <para>
	      Toggle anti-aliasing (doesn't work)
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-T</term>
	  <listitem>
	    <para>
	      Debug.  Test the set_variable() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-G</term>
	  <listitem>
	    <para>
	      Debug.  Test the get_variable() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-M</term>
	  <listitem>
	    <para>
	      Debug.  Test the call_method() function
	    </para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>CTRL-B</term>
	  <listitem>
	    <para>
	      Toggle background color
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  &sources;
  &internals;
  &appendix;

<!-- ============= Authors ================================ -->

  <sect1 id="authors">
    <title>Authors</title>
    <para>
      <application>Gnash</application> is maintained by Rob Savoye
      <email>rob@senecass.com</email>. Please send all comments and
      suggestions to <email>gnash@gnu.org</email> Please use this link
      to <ulink  type="http"
	url="https://savannah.gnu.org/patch/?group=gnash">submit a patch</ulink>
	or this link to <ulink  type="http"
	url="https://savannah.gnu.org/bugs/?group=gnash">file a bug
	report</ulink>.
	I am available for consulting on a variety of renewable energy
	and open source technologies. More details at <ulink type="http"
	url="http://www.senecass.com">http://www.senecass.com</ulink>
    </para>

    <para>
      The following people all contributed code to GameSWF, which was
      the original code base for Gnash. I was also a GameSWF
      contributor. The primary author of GameSWF is Thatcher Ulrich
      <email>tu@tulrich.com</email>. Other individuals that contributed code are:
      Mike Shaver, Thierry Berger-Perrin, Ignacio CastaÃ±o, Willem
      Kokke, Vitaly Alexeev, Alexander Streit.
    </para>

  </sect1>

  <!-- ============= Application License ============================= -->

  &fdl-app;

</article>
