<sect1 id="appendix">
  <title>Appendix</title>
  
  <sect2 id="codestyle">
    <title>Code Style</title>

    <para>
      I know any discussion of coding styles leads to strong opinions,
      so I'll state simply I follow the <ulink type="http"
      url="http://www.gnu.org/prep/standards/standards.html">GNU
      Coding Standards</ulink>. Where there is some flexibility as to
      the location of braces, I prefer mine on the end of a line when
      using an <code>if</code>, <code>while</code>, or <code>do</code>
      statement. I find this more compact style easier to read and
      parse by eye. I'm also a big fan of alays using
      braces around <code>if</code> statements, even if they're one
      liners.
    </para>

    <para>
      Here's my tweaked style settings for <code>Emacs</code>, the one
      true editor to rule them all.

      <programlisting>
      (defconst my-style
          '((c-tab-always-indent   . t)
           (c-auto-newline	   . t)
           (c-hanging-braces-alist . (
				   (brace-list-intro)
				   (namespace-open)
				   (inline-open)
				   (block-open)
				   (brace-list-open)
				   (brace-list-close)
				   (brace-entry-open)
				   (brace-else-brace)
				   (brace-elseif-brace)
				   (class-open after)
				   (class-close)
				   (defun-open after)
				   (defun-close)
				   (extern-lang-open)
				   (inexpr-class-open)
				   (statement-open)
				   (substatement-open)
				   (inexpr-class-close)))
            (c-hanging-colons-alist . ((member-init-intro before)
                                   (inher-intro)
                                   (case-label after)
                                   (label after)
                                   (access-label after)))
            (c-offsets-alist	. (
				   (innamespace . 0)
                                   (case-label  . 2)
				   ))
            (c-cleanup-list	. (
				   (scope-operator)
				   (empty-defun-braces)
				   (brace-else-brace)
				   (brace-elseif-brace)
				   (defun-close-semi)
				   (list-close-comma)
				   )
				)
    ;; no automatic newlines after ';' if following line non-blank or inside
    ;; one-line inline methods
    (add-to-list 'c-hanging-semi&amp;comma-criteria
		 'c-semi&amp;comma-no-newlines-before-nonblanks)
    (add-to-list 'c-hanging-semi&amp;comma-criteria
		 'c-semi&amp;comma-no-newlines-for-oneline-inliners)
;    (knr-argdecl-intro . -)
    (c-echo-syntactic-information-p . t)
    )
  "My GNU Programming Style")
    </programlisting>

    </para>
    
  </sect2>

  <sect2 id="opcodes">
    <title>Shockwave Movie Opcodes</title>

    <sect3 id="v5">
      <title>Version 5</title>
      <para>
	FIXME:
      </para>
    </sect3>
    <sect3 id="v6">
      <title>Version 6</title>
      <para>
	FIXME:
      </para>
    </sect3>
    <sect3 id="v7">
      <title>Version 7</title>
      <para>
	FIXME:
      </para>
    </sect3>
    <sect3 id="v8">
      <title>Version 8</title>
      <para>
	FIXME:
      </para>
    </sect3>
    <sect3 id="v9">
      <title>Version 9</title>
      <para>
	FIXME:
      </para>
    </sect3>

  </sect2>

</sect1>