# 
#   Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 

#
# Build a Firefox XPI package
#

# building an xpi is similar to building a binary snapshot, the main difference
# being how it gets configured, and how the bundle of the package gets made.
# for an xpi package, we have to configure with --enable-xpcom, which the plugin
# uses to find the directory where Gnash lives.

CONFIG_OPTS = \
	-disable-dependency-tracking \
	--disable-rpath \
	--disable-cygnal \
	--disable-testsuite \
	--enable-xpcom \
	--enable-media=ffmpeg \
	--enable-jemalloc \
	--enable-gui=gtk \
	--prefix=/usr \
	--mandir=/usr/share/man \
	--infodir=/usr/share/info \
	--with-npapi-plugindir=/usr/lib/mozilla/plugins

# Do the entire process to build an xpi package
xpi: snapshot xpi-configure snapshot-build snapshot-install

# build the xpi package bundle. snapshot-build and snapshot-install need to
# have been run already. If you wish the automatic dependency checking, use
# the 'xpi' target instead, as this is meant only to be called directly when
# debugging package building.
# This gets a little messy as we build the executable statically linked so we
# don't have to do something uglier to find dynamically linked libraries, plus
# this way the xpi installed libs won't conflict with andy package installed libs.
# Anyway, so after installing the statically linked gnash into the bundle, we then
# have to reconfigure to enable shared libraries to be built, and then rebuild
# the plugins and the xpcom support as dynamically loadable modules.
xpi-bundle:
	-@now=`date "+%Y%m%d"`; \
	pkgname="gnash-${RELEASE}$${now}"; \
	snapshot_dir="gnash-${RELEASE}$${now}"; \
	snapshot_build="$${snapshot_dir}/_build"; \
	snapshot_dest="/tmp/gnash_${RELEASE}$${now}-tmp"; \
	snapshot_xpi="/tmp/gnash_${RELEASE}$${now}-pkg"; \
	mkdir -p $${snapshot_xpi}/plugins; \
	for i in install.rdf; do \
	  cp -fr $(srcdir)/packaging/xpi/$$i $${snapshot_xpi}; \
	done; \
	strip  $${snapshot_dest}/$(bindir)/gtk-gnash; \
	cd $${snapshot_build}; ../configure --enable-shared $(CONFIG_OPTS); \
	$(MAKE) $(AM_MAKEFLAGS) -C plugin clean install-plugin DESTDIR=$${snapshot_dest}; \
	$(MAKE) $(AM_MAKEFLAGS) -C plugin/xpcom all install-pkglib DESTDIR=$${snapshot_dest}; \
	cp -fr $${snapshot_dest}/usr/lib/mozilla/plugins/libgnashplugin.so $${snapshot_xpi}/plugins; \
	cp -fr $${snapshot_dest}/usr/lib/mozilla/plugins/extensions/*.xpt $${snapshot_xpi}/plugins; \
	cp -fr $${snapshot_dest}/usr/lib/mozilla/plugins/extensions/*.so $${snapshot_xpi}/plugins; \
	cp -fr $${snapshot_dest}/usr/bin/gtk-gnash $${snapshot_xpi}; \
	(cd $${snapshot_xpi}; $(ZIP) -r /tmp/$${snapshot_dir}.xpi *);

# configure the xpi build. snapshot needs to have been run already. If you wish the
# automatic dependency checking, use the 'xpi' target instead, as this is meant only
# to be called directly when debugging package building.
xpi-configure:
	-@now=`date "+%Y%m%d"`; \
	pkgname="gnash-${RELEASE}$${now}"; \
	snapshot_dir="$${pkgname}"; \
	snapshot_build="$${snapshot_dir}/_build"; \
	if test ! -d $${snapshot_build}; then \
	  $(MKINSTALLDIRS) $${snapshot_build}; \
	fi; \
	cd $${snapshot_build}; ../configure \
	  --enable-static \
	  --disable-shared \
	  $(CONFIG_OPTS)

# remove files left from package building
xpi-clean:
	rm -fr xpi-* gnash-$(RELEASE)*.xpi

.PHONY : xpi xpi-bundle xpi-configure
