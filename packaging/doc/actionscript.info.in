START-INFO-DIR-ENTRY
This is actionscript.info, produced by makeinfo version 4.11 from actionscript.texi.

* ActionScript Manual V0.2: (actionscript_manual_v0.2).
                                                  [MISSING TEXT]
END-INFO-DIR-ENTRY


File: actionscript.info,  Node: Top,  Next: Introduction,  Up: (dir)

ActionScript Manual V0.2
************************

* Menu:

* Introduction::
* Adding New ActionScript Class::
* The as_value Object Type::
* GNU Free Documentation License::

--- The Detailed Node Listing ---

Introduction

* Object Creation Overview::

Adding New ActionScript Class

* Prototype::
* Declaration::
* Instantiation::
* Methods::
* Dynamic Properties::

The as_value Object Type

* Data Types::
* Determining the Type::
* Fetching the Value::
* Setting the Value and Type::
* Further Reading::

GNU Free Documentation License

* 0. PREAMBLE: 0_ PREAMBLE.
* 1. APPLICABILITY AND DEFINITIONS: 1_ APPLICABILITY AND DEFINITIONS.
* 2. VERBATIM COPYING: 2_ VERBATIM COPYING.
* 3. COPYING IN QUANTITY: 3_ COPYING IN QUANTITY.
* 4. MODIFICATIONS: 4_ MODIFICATIONS.
* 5. COMBINING DOCUMENTS: 5_ COMBINING DOCUMENTS.
* 6. COLLECTIONS OF DOCUMENTS: 6_ COLLECTIONS OF DOCUMENTS.
* 7. AGGREGATION WITH INDEPENDENT WORKS: 7_ AGGREGATION WITH INDEPENDENT WORKS.
* 8. TRANSLATION: 8_ TRANSLATION.
* 9. TERMINATION: 9_ TERMINATION.
* 10. FUTURE REVISIONS OF THIS LICENSE: 10_ FUTURE REVISIONS OF THIS LICENSE.
* Addendum::


File: actionscript.info,  Node: Introduction,  Next: Adding New ActionScript Class,  Prev: Top,  Up: Top

1 Introduction
**************

In this document, the term 'ActionScript class' refers to the C++ class
which is instantiated by Gnash when some ActionScript code instantiates
a corresponding class.  The C++ class stores instance data and
implements the methods which are called on the object in the
ActionScript code.

* Menu:

* Object Creation Overview::


File: actionscript.info,  Node: Object Creation Overview,  Up: Introduction

1.1 Object Creation Overview
============================

When Gnash starts, the _class_init()_ method for each ActionScript
class (listed in Global.cpp) is called.  This method constructs a
prototype, which is implemented as an _as_object_.  In addition, the
method registers the constructor to be used for future object creation,
and attaches methods and properties to the prototype.

   When a new object is needed, instance data is added to the methods
and properties inherited from the prototype.


File: actionscript.info,  Node: Adding New ActionScript Class,  Next: The as_value Object Type,  Prev: Introduction,  Up: Top

2 Adding New ActionScript Class
*******************************

Adding a new ActionScript class is relatively simple, but the process
is complicated by the fact that the interface has evolved over time and
the current code base represents several different formats.  This
document describes the current interface.  The Boolean class should be
considered the authoritative example of a modern ActionScript class.

   ActionScript classes contain a header file and a C++ implementation.
The name is usually the name of the class as it is called in the
ActionScript specifications; for instance _Boolean.cpp_ for the Boolean
class.

   In the CVS source tree, there is a utility file named
_gen-asclass.sh_ which can be used to create the header file and a C++
source file stub for an ActionScript class.

* Menu:

* Prototype::
* Declaration::
* Instantiation::
* Methods::
* Dynamic Properties::


File: actionscript.info,  Node: Prototype,  Next: Declaration,  Up: Adding New ActionScript Class

2.1 Prototype
=============

In ActionScript, a prototype is a base object which contains all the
methods that an instantiated object will contain.  In short, it
contains every part of the class except for the portions dealing with
the storage of instance data.

   In Gnash, the prototype of an ActionScript object is implemented as
an _as_object_.  At startup, the methods and properties of the
ActionScript class are attached to the _as_object_.  The following
example demonstrates how methods can be attached:


                 static void
                 attachBooleanInterface(as_object& o)
                 {
                     o.init_member("toString", new builtin_function(boolean_tostring));
                     o.init_member("valueOf", new builtin_function(boolean_valueof));
                 }

This code was generated using _gen-asclass.sh_.  Typically, you will
need to customize the attach method to include any new methods you add
to the class.

   Static properties can also be added to the ActionScript prototype
(dynamic properties (*note Dynamic Properties::) are addressed later).
They are attached in a similar way:


     	    o.init_member("myProperty", as_value("HelloWorld"));

   Properties which have been added in this manner can be directly
accessed in ActionScript code without a function call, as this piece of
ActionScript code compiled by Ming's _makeswf_ compiler demonstrates:


     	      // Get the value of the myProperty property
     	      if (node.myProperty == "HelloWorld") {
     	          trace("MATCHED");
     	      }


File: actionscript.info,  Node: Declaration,  Next: Instantiation,  Prev: Prototype,  Up: Adding New ActionScript Class

2.2 Declaration
===============

A new class should derive from _as_object_, which is the base class of
every ActionScript object in Gnash.  The class declaration will also be
generated when you use _gen-asclass.sh_.


File: actionscript.info,  Node: Instantiation,  Next: Methods,  Prev: Declaration,  Up: Adding New ActionScript Class

2.3 Instantiation
=================

The class should contain an init method; this is included in the stub
when _gen-asclass.sh_ is used.

   The init method should be called in the constructor in _Global.cpp_,
where all other ActionScript classes are similarly referenced.


File: actionscript.info,  Node: Methods,  Next: Dynamic Properties,  Prev: Instantiation,  Up: Adding New ActionScript Class

2.4 Methods
===========

Every method you implement and attach (*note Prototype::) will receive
an _fn_call_ data structure as an argument when it is called.

* Menu:

* Accessing Arguments::
* Returning a Value to ActionScript::
* Additional fn_call Members::


File: actionscript.info,  Node: Accessing Arguments,  Next: Returning a Value to ActionScript,  Up: Methods

2.4.1 Accessing Arguments
-------------------------

The arguments stored in _fn_call_ should be accessed using _arg()_.  For
instance, the first element can be popped with _fn.arg(0)_.

   The element popped off the stack is an _as_value_ object (*note The
as_value Object Type::).


File: actionscript.info,  Node: Returning a Value to ActionScript,  Next: Additional fn_call Members,  Prev: Accessing Arguments,  Up: Methods

2.4.2 Returning a Value to ActionScript
---------------------------------------

The return value should be an _as_value_ object (*note The as_value
Object Type::).  For example:


                   return as_value('Goodbye, cruel world.');


File: actionscript.info,  Node: Additional fn_call Members,  Prev: Returning a Value to ActionScript,  Up: Methods

2.4.3 Additional fn_call Members
--------------------------------

There are two other useful members of the _fn_call_ structure, namely
_this_ptr_ and _nargs_.  The former points to the class which is
invoking this method, while the latter is a count of the number of
arguments in the stack (*note Accessing Arguments::).

   You may also see instances of the _env_ pointer being used.   This
is being deprecated.  Instances which could be replaced with _arg()_
(*note Accessing Arguments::) are already deprecated; other uses will
be deprecated in the near future.

   Beyond the _arg() (*note Accessing Arguments::)_ method, there is
one method of note.  _dump_args()_ can be used in debugging to output
the entire argument stack.


File: actionscript.info,  Node: Dynamic Properties,  Prev: Methods,  Up: Adding New ActionScript Class

2.5 Dynamic Properties
======================

This section describes accessors to dynamic properties.  Read-only
properties are described in the prototype (*note Prototype::) section.

   Dynamic properties are not created by the _gen-asclass.sh_ script.
Accessors should be written as a single get/set method.  Previously
this was done by overriding _get_member()_ and _set_member()_, but this
practice is deprecated.

   The accessor is written so that it sets the property if it is called
with an argument, and puts the property in the _fn_call_ (*note
Methods::) result pointer (*note Returning a Value to ActionScript::).
For instance:


                 void
                 MyClass::myProperty_getset(const fn_call& fn)
                 {

                     boost::intrusive_ptr<MyClass> ptr = ensureType<MyClass>(fn.this_ptr);

                     // setter
                     if ( fn.nargs > 0 )
                     {
                         bool h = fn.arg(0).to_bool();
                         ptr->MyMethod(h);
                         return;
                     }

                     // getter
                     bool h = ptr->MyMethod();
                     fn.result->set_bool(h);
                 }

   It has not yet been decided whether properties should be set in the
exported interface (*note Prototype::) or attached to instances of the
class.  A property is attached in the following manner:


                 boost::intrusive_ptr<builtin_function> gettersetter;
                 gettersetter = new builtin_function(&MyClass::myProperty_getset, NULL);
                 o.init_property("myProperty", *gettersetter, *gettersetter);


File: actionscript.info,  Node: The as_value Object Type,  Next: GNU Free Documentation License,  Prev: Adding New ActionScript Class,  Up: Top

3 The as_value Object Type
**************************

The _as_value_ class is used throughout the interpreter to create
generic objects to hold data.

* Menu:

* Data Types::
* Determining the Type::
* Fetching the Value::
* Setting the Value and Type::
* Further Reading::


File: actionscript.info,  Node: Data Types,  Next: Determining the Type,  Up: The as_value Object Type

3.1 Data Types
==============

The following data types are supported: _NULLTYPE_, _BOOLEAN_, _STRING_,
_NUMBER_, _OBJECT_, _AS_FUNCTION_, and _MOVIECLIP_ (sprite).  The type
_C_FUNCTION_ is being deprecated.


File: actionscript.info,  Node: Determining the Type,  Next: Fetching the Value,  Prev: Data Types,  Up: The as_value Object Type

3.2 Determining the Type
========================

Several methods allow you to determine if a value stored in _as_value_
is of a specific type.  These follow the form of _is_TYPE_, for example
_is_as_function()_ and _is_number()_.  In general, the type names match
the data types (*note Data Types::) listed above, with the exception of
the type _MOVIECLIP_ which has a method _is_sprite()_.


File: actionscript.info,  Node: Fetching the Value,  Next: Setting the Value and Type,  Prev: Determining the Type,  Up: The as_value Object Type

3.3 Fetching the Value
======================

Another set of methods will return a representation of the value as a
particular type.  They follow the _to_TYPE_ naming convention.  Examples
are _to_number()_ and _to_bool()_.  The type names are as listed (*note
Data Types::) earlier, except for _MOVIECLIP_, which uses _to_sprite()_.


File: actionscript.info,  Node: Setting the Value and Type,  Next: Further Reading,  Prev: Fetching the Value,  Up: The as_value Object Type

3.4 Setting the Value and Type
==============================

Finally, there is the _set_TYPE_ series of methods.  They change the
type to the type specified in the method name, and set the value to the
one given as an argument.  It is also possible to accomplish the same
thing with the _=_ operator.  Again, type names match those named
earlier (*note Data Types::), except in the case of _MOVIECLASS_.  Its
method is called _set_sprite()_.


File: actionscript.info,  Node: Further Reading,  Prev: Setting the Value and Type,  Up: The as_value Object Type

3.5 Further Reading
===================

Please refer to _as_value.h_ or the Doxygen documentation (see
'Processing The Documentation' in the Gnash manual for instructions on
generating documents with Doxygen) for more information about which
methods are available for the _as_value_ object.


File: actionscript.info,  Node: GNU Free Documentation License,  Prev: The as_value Object Type,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

* Menu:

* 0. PREAMBLE: 0_ PREAMBLE.
* 1. APPLICABILITY AND DEFINITIONS: 1_ APPLICABILITY AND DEFINITIONS.
* 2. VERBATIM COPYING: 2_ VERBATIM COPYING.
* 3. COPYING IN QUANTITY: 3_ COPYING IN QUANTITY.
* 4. MODIFICATIONS: 4_ MODIFICATIONS.
* 5. COMBINING DOCUMENTS: 5_ COMBINING DOCUMENTS.
* 6. COLLECTIONS OF DOCUMENTS: 6_ COLLECTIONS OF DOCUMENTS.
* 7. AGGREGATION WITH INDEPENDENT WORKS: 7_ AGGREGATION WITH INDEPENDENT WORKS.
* 8. TRANSLATION: 8_ TRANSLATION.
* 9. TERMINATION: 9_ TERMINATION.
* 10. FUTURE REVISIONS OF THIS LICENSE: 10_ FUTURE REVISIONS OF THIS LICENSE.
* Addendum::


File: actionscript.info,  Node: 0_ PREAMBLE,  Next: 1_ APPLICABILITY AND DEFINITIONS,  Up: GNU Free Documentation License

A.1 0. PREAMBLE
===============

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without
modifying it, either commercially or non-commercially. Secondarily,
this License preserves for the author and publisher a way to get credit
for their work, while not being considered responsible for
modifications made by others.

   This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense. It
complements the GNU General Public License, which is a copyleft license
designed for free software.

   We have designed this License in order to use it for manuals for
free software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does. But this License is not limited to software manuals; it
can be used for any textual work, regardless of subject matter or
whether it is published as a printed book. We recommend this License
principally for works whose purpose is instruction or reference.


File: actionscript.info,  Node: 1_ APPLICABILITY AND DEFINITIONS,  Next: 2_ VERBATIM COPYING,  Prev: 0_ PREAMBLE,  Up: GNU Free Documentation License

A.2 1. APPLICABILITY AND DEFINITIONS
====================================

This License applies to any manual or other work that contains a notice
placed by the copyright holder saying it can be distributed under the
terms of this License. The "Document", below, refers to any such manual
or work. Any member of the public is a licensee, and is addressed as
"you".

   A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

   A "Secondary Section" is a named appendix or a front-matter section
of the Document (*note fdl-document::) that deals exclusively with the
relationship of the publishers or authors of the Document to the
Document's overall subject (or to related matters) and contains nothing
that could fall directly within that overall subject. (For example, if
the Document is in part a textbook of mathematics, a Secondary Section
may not explain any mathematics.)  The relationship could be a matter
of historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position
regarding them.

   The "Invariant Sections" are certain  Secondary Sections (*note
fdl-secondary::) whose titles are designated, as being those of
Invariant Sections, in the notice that says that the Document (*note
fdl-document::) is released under this License.

   The "Cover Texts" are certain short passages of text that are
listed, as Front-Cover Texts or Back-Cover Texts, in the notice that
says that the Document (*note fdl-document::) is released under this
License.

   A "Transparent" copy of the  Document (*note fdl-document::) means a
machine-readable copy, represented in a format whose specification is
available to the general public, whose contents can be viewed and edited
directly and straightforwardly with generic text editors or (for images
composed of pixels) generic paint programs or (for drawings) some
widely available drawing editor, and that is suitable for input to text
formatters or for automatic translation to a variety of formats
suitable for input to text formatters. A copy made in an otherwise
Transparent file format whose markup has been designed to thwart or
discourage subsequent modification by readers is not Transparent.  A
copy that is not "Transparent" is called "Opaque".

   Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML or
XML using a publicly available DTD, and standard-conforming simple HTML
designed for human modification. Opaque formats include PostScript, PDF,
proprietary formats that can be read and edited only by proprietary
word processors, SGML or XML for which the DTD and/or processing tools
are not generally available, and the machine-generated HTML produced by
some word processors for output purposes only.

   The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page. For works in formats
which do not have any title page as such, "Title Page" means the text
near the most prominent appearance of the work's title, preceding the
beginning of the body of the text.


File: actionscript.info,  Node: 2_ VERBATIM COPYING,  Next: 3_ COPYING IN QUANTITY,  Prev: 1_ APPLICABILITY AND DEFINITIONS,  Up: GNU Free Documentation License

A.3 2. VERBATIM COPYING
=======================

You may copy and distribute the Document (*note fdl-document::) in any
medium, either commercially or noncommercially, provided that this
License, the copyright notices, and the license notice saying this
License applies to the Document are reproduced in all copies, and that
you add no other conditions whatsoever to those of this License. You
may not use technical measures to obstruct or control the reading or
further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large
enough number of copies you must also follow the conditions in section
3 (*note 3_ COPYING IN QUANTITY::).

   You may also lend copies, under the same conditions stated above,
and you may publicly display copies.


File: actionscript.info,  Node: 3_ COPYING IN QUANTITY,  Next: 4_ MODIFICATIONS,  Prev: 2_ VERBATIM COPYING,  Up: GNU Free Documentation License

A.4 3. COPYING IN QUANTITY
==========================

If you publish printed copies of the Document (*note fdl-document::)
numbering more than 100, and the Document's license notice requires
Cover Texts (*note fdl-cover-texts::), you must enclose the copies in
covers that carry, clearly and legibly, all these Cover Texts:
Front-Cover Texts on the front cover, and Back-Cover Texts on the back
cover. Both covers must also clearly and legibly identify you as the
publisher of these copies. The front cover must present the full title
with all words of the title equally prominent and visible. You may add
other material on the covers in addition. Copying with changes limited
to the covers, as long as they preserve the title of the Document
(*note fdl-document::) and satisfy these conditions, can be treated as
verbatim copying in other respects.

   If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

   If you publish or distribute Opaque (*note fdl-transparent::) copies
of the Document (*note fdl-document::) numbering more than 100, you
must either include a machine-readable Transparent (*note
fdl-transparent::) copy along with each Opaque copy, or state in or
with each Opaque copy a publicly-accessible computer-network location
containing a complete Transparent copy of the Document, free of added
material, which the general network-using public has access to download
anonymously at no charge using public-standard network protocols. If
you use the latter option, you must take reasonably prudent steps, when
you begin distribution of Opaque copies in quantity, to ensure that
this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

   It is requested, but not required, that you contact the authors of
the Document (*note fdl-document::) well before redistributing any
large number of copies, to give them a chance to provide you with an
updated version of the Document.


File: actionscript.info,  Node: 4_ MODIFICATIONS,  Next: 5_ COMBINING DOCUMENTS,  Prev: 3_ COPYING IN QUANTITY,  Up: GNU Free Documentation License

A.5 4. MODIFICATIONS
====================

You may copy and distribute a Modified Version (*note fdl-modified::)
of the Document (*note fdl-document::) under the conditions of sections
2 (*note 2_ VERBATIM COPYING::) and 3 (*note 3_ COPYING IN QUANTITY::)
above, provided that you release the Modified Version under precisely
this License, with the Modified Version filling the role of the
Document, thus licensing distribution and modification of the Modified
Version to whoever possesses a copy of it. In addition, you must do
these things in the Modified Version:

   * *A. * Use in the Title Page (*note fdl-title-page::) (and on the
     covers, if any) a title distinct from that of the Document (*note
     fdl-document::), and from those of previous versions (which
     should, if there were any, be listed in the History section of the
     Document). You may use the same title as a previous version if the
     original publisher of that version gives permission.

   * *B. * List on the Title Page (*note fdl-title-page::), as authors,
     one or more persons or entities responsible for authorship of the
     modifications in the Modified Version (*note fdl-modified::),
     together with at least five of the principal authors of the
     Document (*note fdl-document::) (all of its principal authors, if
     it has less than five).

   * *C. * State on the Title Page (*note fdl-title-page::) the name of
     the publisher of the Modified Version (*note fdl-modified::), as
     the publisher.

   * *D. * Preserve all the copyright notices of the Document (*note
     fdl-document::).

   * *E. * Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.

   * *F. * Include, immediately after the copyright notices, a license
     notice giving the public permission to use the Modified Version
     (*note fdl-modified::) under the terms of this License, in the
     form shown in the Addendum below.

   * *G. * Preserve in that license notice the full lists of  Invariant
     Sections (*note fdl-invariant::) and required Cover Texts (*note
     fdl-cover-texts::) given in the Document's (*note fdl-document::)
     license notice.

   * *H. * Include an unaltered copy of this License.

   * *I. * Preserve the section entitled "History", and its title, and
     add to it an item stating at least the title, year, new authors,
     and publisher of the Modified Version  (*note fdl-modified::)as
     given on the Title Page (*note fdl-title-page::).  If there is no
     section entitled "History" in the Document (*note fdl-document::),
     create one stating the title, year, authors, and publisher of the
     Document as given on its Title Page, then add an item describing
     the Modified Version as stated in the previous sentence.

   * *J. * Preserve the network location, if any, given in the Document
     (*note fdl-document::) for public access to a Transparent (*note
     fdl-transparent::) copy of the Document, and likewise the network
     locations given in the Document for previous versions it was based
     on. These may be placed in the "History" section.  You may omit a
     network location for a work that was published at least four years
     before the Document itself, or if the original publisher of the
     version it refers to gives permission.

   * *K. * In any section entitled "Acknowledgements" or "Dedications",
     preserve the section's title, and preserve in the section all the
     substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.

   * *L. * Preserve all the Invariant Sections (*note fdl-invariant::)
     of the Document (*note fdl-document::), unaltered in their text
     and in their titles.  Section numbers or the equivalent are not
     considered part of the section titles.

   * *M. * Delete any section entitled "Endorsements". Such a section
     may not be included in the Modified Version (*note fdl-modified::).

   * *N. * Do not retitle any existing section as "Endorsements" or to
     conflict in title with any Invariant Section (*note
     fdl-invariant::).

   If the Modified Version (*note fdl-modified::) includes new
front-matter sections or appendices that qualify as Secondary Sections
(*note fdl-secondary::) and contain no material copied from the
Document, you may at your option designate some or all of these
sections as invariant. To do this, add their titles to the list of
Invariant Sections (*note fdl-invariant::) in the Modified Version's
license notice.  These titles must be distinct from any other section
titles.

   You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version (*note
fdl-modified::) by various parties-for example, statements of peer
review or that the text has been approved by an organization as the
authoritative definition of a standard.

   You may add a passage of up to five words as a Front-Cover Text
(*note fdl-cover-texts::), and a passage of up to 25 words as a
Back-Cover Text (*note fdl-cover-texts::), to the end of the list of
Cover Texts (*note fdl-cover-texts::) in the Modified Version (*note
fdl-modified::).  Only one passage of Front-Cover Text and one of
Back-Cover Text may be added by (or through arrangements made by) any
one entity. If the Document (*note fdl-document::) already includes a
cover text for the same cover, previously added by you or by
arrangement made by the same entity you are acting on behalf of, you
may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

   The author(s) and publisher(s) of the Document (*note
fdl-document::) do not by this License give permission to use their
names for publicity for or to assert or imply endorsement of any
Modified Version  (*note fdl-modified::).


File: actionscript.info,  Node: 5_ COMBINING DOCUMENTS,  Next: 6_ COLLECTIONS OF DOCUMENTS,  Prev: 4_ MODIFICATIONS,  Up: GNU Free Documentation License

A.6 5. COMBINING DOCUMENTS
==========================

You may combine the Document (*note fdl-document::) with other
documents released under this License, under the terms defined in
section 4 (*note 4_ MODIFICATIONS::) above for modified versions,
provided that you include in the combination all of the Invariant
Sections (*note fdl-invariant::) of all of the original documents,
unmodified, and list them all as Invariant Sections of your combined
work in its license notice.

   The combined work need only contain one copy of this License, and
multiple identical Invariant Sections (*note fdl-invariant::) may be
replaced with a single copy. If there are multiple Invariant Sections
with the same name but different contents, make the title of each such
section unique by adding at the end of it, in parentheses, the name of
the original author or publisher of that section if known, or else a
unique number. Make the same adjustment to the section titles in the
list of Invariant Sections in the license notice of the combined work.

   In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


File: actionscript.info,  Node: 6_ COLLECTIONS OF DOCUMENTS,  Next: 7_ AGGREGATION WITH INDEPENDENT WORKS,  Prev: 5_ COMBINING DOCUMENTS,  Up: GNU Free Documentation License

A.7 6. COLLECTIONS OF DOCUMENTS
===============================

You may make a collection consisting of the Document (*note
fdl-document::) and other documents released under this License, and
replace the individual copies of this License in the various documents
with a single copy that is included in the collection, provided that
you follow the rules of this License for verbatim copying of each of the
documents in all other respects.

   You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


File: actionscript.info,  Node: 7_ AGGREGATION WITH INDEPENDENT WORKS,  Next: 8_ TRANSLATION,  Prev: 6_ COLLECTIONS OF DOCUMENTS,  Up: GNU Free Documentation License

A.8 7. AGGREGATION WITH INDEPENDENT WORKS
=========================================

A compilation of the Document (*note fdl-document::) or its derivatives
with other separate and independent documents or works, in or on a
volume of a storage or distribution medium, does not as a whole count
as a Modified Version (*note fdl-modified::) of the Document, provided
no compilation copyright is claimed for the compilation.  Such a
compilation is called an "aggregate", and this License does not apply
to the other self-contained works thus compiled with the Document , on
account of their being thus compiled, if they are not themselves
derivative works of the Document.  If the Cover Text (*note
fdl-cover-texts::) requirement of section 3 (*note 3_ COPYING IN
QUANTITY::) is applicable to these copies of the Document, then if the
Document is less than one quarter of the entire aggregate, the
Document's Cover Texts may be placed on covers that surround only the
Document within the aggregate. Otherwise they must appear on covers
around the whole aggregate.


File: actionscript.info,  Node: 8_ TRANSLATION,  Next: 9_ TERMINATION,  Prev: 7_ AGGREGATION WITH INDEPENDENT WORKS,  Up: GNU Free Documentation License

A.9 8. TRANSLATION
==================

Translation is considered a kind of modification, so you may distribute
translations of the Document (*note fdl-document::) under the terms of
section 4 (*note 4_ MODIFICATIONS::). Replacing  Invariant Sections
(*note fdl-invariant::) with translations requires special permission
from their copyright holders, but you may include translations of some
or all Invariant Sections in addition to the original versions of these
Invariant Sections. You may include a translation of this License
provided that you also include the original English version of this
License. In case of a disagreement between the translation and the
original English version of this License, the original English version
will prevail.


File: actionscript.info,  Node: 9_ TERMINATION,  Next: 10_ FUTURE REVISIONS OF THIS LICENSE,  Prev: 8_ TRANSLATION,  Up: GNU Free Documentation License

A.10 9. TERMINATION
===================

You may not copy, modify, sublicense, or distribute the Document (*note
fdl-document::) except as expressly provided for under this License.
Any other attempt to copy, modify, sublicense or distribute the
Document is void, and will automatically terminate your rights under
this License. However, parties who have received copies, or rights,
from you under this License will not have their licenses terminated so
long as such parties remain in full compliance.


File: actionscript.info,  Node: 10_ FUTURE REVISIONS OF THIS LICENSE,  Next: Addendum,  Prev: 9_ TERMINATION,  Up: GNU Free Documentation License

A.11 10. FUTURE REVISIONS OF THIS LICENSE
=========================================

The Free Software Foundation (http://www.gnu.org/fsf/fsf.html) may
publish new, revised versions of the GNU Free Documentation License
from time to time. Such new versions will be similar in spirit to the
present version, but may differ in detail to address new problems or
concerns. See http://www.gnu.org/copyleft/
(http://www.gnu.org/copyleft).

   Each version of the License is given a distinguishing version
number. If the Document (*note fdl-document::) specifies that a
particular numbered version of this License "or any later version"
applies to it, you have the option of following the terms and
conditions either of that specified version or of any later version
that has been published (not as a draft) by the Free Software
Foundation. If the Document does not specify a version number of this
License, you may choose any version ever published (not as a draft) by
the Free Software Foundation.


File: actionscript.info,  Node: Addendum,  Prev: 10_ FUTURE REVISIONS OF THIS LICENSE,  Up: GNU Free Documentation License

A.12 Addendum
=============

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

     Copyright  YEAR YOUR NAME.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with the Invariant Sections (*note fdl-invariant::)
     being LIST THEIR TITLES, with the Front-Cover Texts (*note
     fdl-cover-texts::) being LIST, and with the Back-Cover Texts
     (*note fdl-cover-texts::) being LIST.  A copy of the license is
     included in the section entitled "GNU Free Documentation License".

   If you have no Invariant Sections (*note fdl-invariant::), write
"with no Invariant Sections" instead of saying which ones are
invariant.  If you have no Front-Cover Texts (*note fdl-cover-texts::),
write "no Front-Cover Texts" instead of "Front-Cover Texts being LIST";
likewise for Back-Cover Texts (*note fdl-cover-texts::).

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License
(http://www.gnu.org/copyleft/gpl.html), to permit their use in free
software.



Tag Table:
Node: Top248
Node: Introduction1443
Node: Object Creation Overview1909
Node: Adding New ActionScript Class2492
Node: Prototype3518
Node: Declaration5195
Node: Instantiation5536
Node: Methods5932
Node: Accessing Arguments6322
Node: Returning a Value to ActionScript6717
Node: Additional fn_call Members7106
Node: Dynamic Properties7959
Node: The as_value Object Type9737
Node: Data Types10160
Node: Determining the Type10476
Node: Fetching the Value11003
Node: Setting the Value and Type11488
Node: Further Reading12077
Node: GNU Free Documentation License12487
Node: 0_ PREAMBLE13270
Node: 1_ APPLICABILITY AND DEFINITIONS14579
Ref: fdl-document14807
Ref: fdl-modified15098
Ref: fdl-secondary15285
Ref: fdl-invariant15930
Ref: fdl-cover-texts16179
Ref: fdl-transparent16392
Ref: fdl-title-page17682
Node: 2_ VERBATIM COPYING18071
Node: 3_ COPYING IN QUANTITY19054
Node: 4_ MODIFICATIONS21414
Node: 5_ COMBINING DOCUMENTS27477
Node: 6_ COLLECTIONS OF DOCUMENTS28977
Node: 7_ AGGREGATION WITH INDEPENDENT WORKS29871
Node: 8_ TRANSLATION31102
Node: 9_ TERMINATION32008
Node: 10_ FUTURE REVISIONS OF THIS LICENSE32666
Node: Addendum33809

End Tag Table


Local Variables:
coding: US-ASCII
End:
