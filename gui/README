OVERVIEW

This is a simple GUI layer to support using the menu and event
handling systems of various toolkits. Initially Gnash used SDL, but
this has slow event handling, and no GUI widgets to create something
like menus or dialog boxes.

Gtk2+ support was added to Gnash so it would work within
Mozilla/Firefox as a plugin to play Flash content. This also allowed
the addition of a mouse menu to control the movie instead of just the
existing keyboard commands. This was a user requested feature, and
also opened the way for a better UI design for the player.

The changes to support both SDL and GTK made the main loop unreadable
ifdef hell, so this class was created to abstract out the guts to make
the main code more readable.

As Gnash's GUI requirements are light, it was decided that while doing
this, support of multiple toolkits would be good. This will enable
better integration on embedded devices where only a framebuffer is
used. This will enable Gnash to have a GUI on platforms with no
windowing system.

At this time, OpenGL and (experimental) Cairo and AGG backends are available.
It should be possible to use OpenGLES (the embedded version). As the
AGG backend is the most functional for a framebuffer, that should be
used for most embedded targets. Cairo also supports a framebuffer
driver, but that renderer is less complete.

STATUS

GTK2:
- implemented OpenGL, Agg and Cairo backends.
- Events work.
- Pop-up menu is available. Window menu available for standalone.
- Firefox plugin works.

SDL: deprecated in favour of FLTK.
- OpenGL, Agg and Cairo backends.
- Mouse events work (keyboard events don't).
- There's no pop-up menu (and there probably never will be one).
- The Firefox plugin is not available for this frontend.

QT/KDE:
- OpenGL backend.
- A popup menu is available.
- Klash plugin for konqueror is available.

FLTK:
- Requires FLTK2.
- Implements Agg and Cairo backends.
- Events work.
- Popup menu is available.
- Firefox plugin and KDE Kpart work.

Framebuffer:
- Working with any hi- or truecolor framebuffer device (/dev/fb0). Supports
  PS/2 compatible mice and eGalax touchscreens.

8706:1] 19:10:26: DEBUG: virtual bool gnash::MouseDevice::init(const std::string&, size_t) returning
8706:1] 19:10:26: DEBUG: Framebuffer device uses 5242880 bytes of memory.
8706:1] 19:10:26: DEBUG: Video mode: 1280x1024 with 32 bits per pixel.
8706:1] 19:10:26: DEBUG: bool gnash::FBGui::initialize_renderer() enter
8706:1] 19:10:26: DEBUG: Double buffering disabled
8706:1] 19:10:26: DEBUG: red channel: 16 / 8
8706:1] 19:10:26: DEBUG: green channel: 8 / 8
8706:1] 19:10:26: DEBUG: blue channel: 0 / 8
8706:1] 19:10:26: DEBUG: Total bits per pixel: 32
8706:1] 19:10:26: DEBUG: Framebuffer pixel format is BGRA32 (little-endian host)
8706:1] 19:10:26: DEBUG: Initialized AGG buffer <0xb3f7b000>, 5242880 bytes, 1280x1024, rowsize is 5120 bytes
8706:1] 19:10:26: DEBUG: Original TTY NO = 1
8706:1] 19:10:26: DEBUG: VT 1 ready
8706:1] 19:10:26: DEBUG: bool gnash::FBGui::initialize_renderer() returning

(gdb) p this->var_screeninfo
$3 = {xres = 1280, yres = 1024, xres_virtual = 1280, yres_virtual = 1024, 
  xoffset = 0, yoffset = 0, bits_per_pixel = 32, grayscale = 0, red = {
    offset = 16, length = 8, msb_right = 0}, green = {offset = 8, length = 8, 
    msb_right = 0}, blue = {offset = 0, length = 8, msb_right = 0}, transp = {
    offset = 0, length = 0, msb_right = 0}, nonstd = 0, activate = 0, 
  height = 4294967295, width = 4294967295, accel_flags = 0, pixclock = 0, 
  left_margin = 0, right_margin = 0, upper_margin = 0, lower_margin = 0, 
  hsync_len = 0, vsync_len = 0, sync = 0, vmode = 0, rotate = 0, reserved = {
    0, 0, 0, 0, 0}}
(gdb) p this->fix_screeninfo
$4 = {id = "inteldrmfb\000\000\000\000\000", smem_start = 4043309056, 
  smem_len = 5242880, type = 0, type_aux = 0, visual = 2, xpanstep = 1, 
  ypanstep = 1, ywrapstep = 0, line_length = 5120, mmio_start = 4289200128, 
  mmio_len = 524288, accel = 0, reserved = {0, 0, 0}}
(gdb) 
