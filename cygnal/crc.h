// 
//   Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __CRC_H__
#define __CRC_H__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "gnashconfig.h"
#endif

#include <string>
#include <vector>
#include <iostream> // for output operator

#include "rc.h"

/// \namespace cygnal
///
/// This namespace is for all the Cygnal specific classes not used by
/// anything else in Gnash.
namespace cygnal {

/// \class cygnal::CRcInitFile
///	This class handles reading values from the Cygnal
///	configuration file, .cygnalrc, and into a form we can use in
///	Cygnal.
class DSOEXPORT CRcInitFile : public gnash::RcInitFile
{
public:
    /// \brief Return the default instance of RC file,
    static CRcInitFile& getDefaultInstance();
    
    /// \brief Load all the configuration files.
    ///		This includes parsing the default .gnashrc file for
    ///		Gnash settings that control the swf parser and virtual
    ///		machine. These setting can be overridden in the
    ///		.cygnalrc file, plus the Cygnal specific file has
    ///		options only used by Cygnal.
    bool loadFiles();

    /// \brief Parse and load configuration file
    bool parseFile(const std::string& filespec);

    int getPortOffset() { return _port_offset; };
    void setPortOffset(int x) { _port_offset = x; };

    int getTestingFlag() { return _testing; };
    void setTestingFlag(bool x) { _testing = x; };
    
    int getThreadingFlag() { return _threading; };
    void setThreadingFlag(bool x) { _threading = x; };
    
    ///  \brief Dump the internal data of this class in a human readable form.
    /// @remarks This should only be used for debugging purposes.
    void dump() const { dump(std::cerr); }

    /// \overload dump(std::ostream& os) const
    void dump(std::ostream& os) const;

private:
    /// Construct only by getDefaultInstance()
    CRcInitFile();
    /// Never destroy (TODO: add a destroyDefaultInstance)
    ~CRcInitFile();

    int _port_offset;
    bool _testing;
    bool _threading;
};

/// \brief Dump to the specified output stream.
inline std::ostream& operator << (std::ostream& os, const CRcInitFile& crcini)
{
	crcini.dump(os);
	return os;
}

// End of gnash namespace 
}

// __CRC_H__
#endif


// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
