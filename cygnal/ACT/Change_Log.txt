Change Log for GNU Cygnal, Module ACT
=====================================

2007-07-21 Eric Hughes <eh@narthex.us>
	* Handle.hpp: Changed operator declarations in Handled from references to values.
	* test_support/Supplied_Service.hpp: Changed auto_ptr to shared_ptr to enable implicit copy constructor.
	* unit_tests/Test_{Scheduler,ACT,Scheduling_Queue}.cpp: Changed test inclusions to use new header that suppresses spurious MSVC warnings.
	* unit_tests/Test_Scheduler.cpp: Added typedef test aspect for Handled that refers to access-to-owner base class.  It required explicit namespace qualification.

2007-07-19 Eric Hughes <eh@narthex.us>
	* Handle.hpp: Added forwarding typedefs in Vector_with_Handle_Index.
	* Pause_Demon.cpp: Added important portability note.

2007-07-10 Eric Hughes <eh@narthex.us>
	* Pause_Demon.[hc]pp: Renamed from Pause_Service.[hc]pp.
	* unit_tests/Test_Scheduler.cpp: Added finished_at_bound() to scheduler test aspect.  (Re-)Wrote a proper pause demon test.
	* ACT.doxygen.txt: Added more environment documentation.

2007-07-09 Eric Hughes <eh@narthex.us>
	* Scheduler.hpp, Scheduler.cpp, Scheduler.T.cpp: Renamed scheduler category Service to Demon to get rid of a name collision.

2007-07-06 Eric Hughes <eh@narthex.us>
	* ACT.hpp, Handle.cpp, Listen.T.cpp, Pause_Service.hpp, Scheduler.hpp, Scheduler.T.cpp, Scheduling_Queue.hpp, Service.hpp, test_support/Action_Tracing.hpp, test_support/Simple_Actions.hpp, test_support/Supplied_Service.hpp: Comment cleanup for doxygen.
	* unit_tests/Test_Scheduler.cpp: Put everything into namespace ACT_Test.  New doxygen comments.

2007-07-05 Eric Hughes <eh@narthex.us>
	* ../Aspect.hpp: Put declarations within namespace \c aspect.
	* Cygnal_Instances.cpp, Handle.hpp, Scheduler.hpp, Service.hpp, test_support/Supplied_Service.hpp, unit_tests/Test_Scheduler.cpp: Added aspect namespace declarations.  Put specializations of null aspects into proper namespace block.

2007-07-04 Eric Hughes <eh@narthex.us>
	* Scheduler.T.cpp: Renamed from Scheduler_T.cpp.
	* Cygnal_Instances.cpp, unit_tests/Test_Scheduler.cpp, unit_tests/Test_Scheduling_Queue.cpp: Changed file name references.
	* Listen.hpp: Added documentation.
	* Listen.cpp: Added documentation.  Slightly changed removal loop.
	* test_support/Listening_Actions.[hc]pp: Moved null constructor to header. Fixed comments.  Removed unused member.

2007-07-04 Eric Hughes <eh@narthex.us>
	* Listen.hpp, Listen.T.cpp, test_support/Listening_Actions.[hc]pp: Factored out monitor base class from N_to_completion_Monitor.

2007-07-04 Eric Hughes <eh@narthex.us>
	* Listen.hpp, Listen.T.cpp, test_support/Listening_Actions.[hc]pp: Extracted generic listening base class from N_to_completion.

2007-07-03 Eric Hughes <eh@narthex.us>
	* Scheduler_T.cpp: Renamed from Scheduler_Templated.cpp.
	* Cygnal_Instances.cpp, unit_tests/Test_Scheduler.cpp: Renamed file name references.

2007-07-03 Eric Hughes <eh@narthex.us>
	* Scheduler.hpp, Scheduler_Templated.cpp: Removed execution loop with bound.  Augmented aspect points.
	* unit_tests/Test_Scheduler.cpp: Wrote test aspect for scheduler with an execution bound.  Converted all test cases to use it.

2007-07-02 Eric Hughes <eh@narthex.us>
	* Scheduler.hpp: Made Scheduler and wakeup_listener virtual base classes.  
	* Scheduler.hpp, Scheduling_Queue.hpp: Added template parameters to wakeup_listener_allocated and Basic_Wakeup_Listener.  
	* Scheduler.hpp, Scheduler_Templated.cpp: Added aspect to Basic_Scheduler.
	* Scheduler_Templated.cpp, Scheduler.cpp: Moved wake up listener code from non-template to template source.	
	* Cygnal_Instances.cpp: Instantiate Basic_Scheduler directly, now that Scheduler is an interface.
	* Handle.hpp: Added inline declarations for aspect class.
	* unit_tests/Test_Scheduler.cpp: Added test aspect for Basic_Scheduler.
	* unit_tests/Test_Scheduling_Queue.cpp: Added more explicit template instantiations.

2007-06-30 Eric Hughes <eh@narthex.us>
	* test_support/Listening_Actions.[hc]pp: Changed follower registry for listening monitors to use weak pointers.

2007-06-30 Eric Hughes <eh@narthex.us>
	* Service.[hc]pp: Enabled testing a Generator for completion so that a Service may complete.
	* test_support/Supplied_Service.[hc]pp: Added shutdown completion to Supplied_Service.
	* unit_tests/Test_Scheduler.cpp: Augmented service test to add shutdown.

2007-06-29 Eric Hughes <eh@narthex.us>
	* Scheduler.[hc]pp, Scheduler_Templated.cpp: renamed enumeration identifier Service to action_Service.
	* Service.[hc]pp: Added aspect to class Service. Base aspect defines two points, one each at the beginning and end of run().
	* Supplied_Service.[hc]pp: Used Service aspect to enable tracking of Service::run().

2007-06-29 Eric Hughes <eh@narthex.us>
	* Cygnal_Instances.cpp: Included Handle.cpp to get the handle class instantiated also.
	* Scheduler.hpp, Scheduler_Templated.hpp: Added Handled as parent class of Basic_Scheduler.
	* test_support/Listening_Actions.[hc]pp: Used Handle_Registry_Follower to enable one monitor per scheduler, rather than one monitor per class.
	* test_support/Supplied_Service.hpp, unit_tests/Test_Scheduler.cpp: Added tracker to Supplied_Service constructor.

2007-06-29 Eric Hughes <eh@narthex.us>
	* ../Aspect.hpp: Cleaned up set_owner definitions and inheritance idiom.  Renamed Aspect_Base to Null_Aspect_Base.
	* Scheduler.hpp: Added aspect to Basic_Scheduler (as-yet unused).  Made typedef so that external code can just use symbol 'Scheduler'.
	* Scheduler.cpp, Scheduler_Templated.cpp, Cyngal_Instances.cpp: Split template member definitions into separate file for inclusion and explicit instantiation.  Avoids multiple definitions of non-template classes.
	* Handle.hpp, unit_tests/Test_Scheduler.cpp: Split null aspect for Handled as per new idiom. Cleaned up test aspect definitions accordingly.
	* Pause_Service.hpp, Service.[ch]pp, test_support/Supplied_Service.hpp, unit_tests/Test_Scheduler.cpp: Replaced 'Basic_Scheduler' with 'Scheduler'.

2007-06-28 Eric Hughes <eh@narthex.us>
	* ../Aspect.hpp: Added arity-2 null aspect.
	* Handle.[hc]pp: Added Marker classes for Handle, etc. to isolate use of indices.
	* unit_tests/Test_Scheduler.cpp: Added arity-2 test aspect; updated test to use markers.

2007-06-27 Eric Hughes <eh@narthex.us>
	* Handle.[hc]pp: Finished implementation of Handle_Registry_Follower, including its null aspect. Added new proxies for Vector_with_Handle_Index.
	* unit_tests/Test_Scheduler.cpp: New unit test for Handle_Registry_Follower, including a test aspect.

2007-06-27 Eric Hughes <eh@narthex.us>
	* Handle.hpp: Beginning of an implementation of Handle_Registry_Follower.
	* test_support/Simple_Actions.hpp: Removed extraneous (and previous) definition of class N_to_completion.
	* Many small comment modification to doxygen comments.
	
2007-06-27 Eric Hughes <eh@narthex.us>
	* Handle.[hc]pp, unit_tests/Test_Scheduler.cpp: Renamed Handle_Registry to Handle_Registry_Leader.

2007-06-26 Eric Hughes <eh@narthex.us>
	* ../Aspect.hpp: Added Aspect_Has_Access_To_Owner to make owner access generic.
	* Handle.hpp: Changed initialization of aspect owner pointer.
	* unit_tests/Test_Scheduler.cpp: Reworked owner access with new classes.

2007-06-26 Eric Hughes <eh@narthex.us>
	* Handle.hpp: Renamed Handled::at() to Handled::registry_at().

2007-06-25 Eric Hughes <eh@narthex.us>
	* ../Aspect.cpp: Changed instantiation order for aspects for technical reasons involving self-reference in template parameters.
	* Handle.hpp: Added typedefs for aspect_type and friend declarations.
	* Handle.cpp: Changed template declarations to match new aspect idiom.
	* unit_tests/Test_Scheduler.cpp: Completed the white box test for Handled.  It passes.

2007-06-23 Eric Hughes <eh@narthex.us>
	* Handle.hpp: Added Handle_Registry::remove() and Handle::~Handle().
	* Handle.cpp: Implemented Handle_Registry::remove().
	* unit_tests/Test_Scheduler.cpp: Added empty aspect methods for verification under debugger.

2007-06-23 Eric Hughes <eh@narthex.us>
	* ../Aspect.hpp: Base template classes to assist writing derivable aspects.
	* Handle.hpp: Added aspects to Handle_Registry and Handled.  
	* Handle.cpp: Use two hooks in Handle_Registry::add, which distinguish between adding a new registry entry and reusing an existing one.
	* unit_tests/Test_Scheduler.cpp: Added test aspects for Handled and Handled_Registry.  They compile buit don't yet do anything.

2007-06-23 Eric Hughes <eh@narthex.us>
	* Handle.[hc]pp: New classes for handles, handle indices to vectors, and handle-registered classes.
	* unit_tests/Test_Scheduler.cpp: Unit test for handled class

2007-06-22 Eric Hughes <eh@narthex.us>
	* Scheduler.hpp: Added second sequence number for round-robin scheduling of background service.
	* Scheduler.cpp: Changed add_service to use new sequence number and activate_one_item to use it.
	* Service.hpp: Renamed old Generator class; wrote new one.  Added shutdown method to Service.
	* Service.cpp: Rewrote loop of Service::run to use new Generator.
	* unit_tests/Test_Scheduler.cpp: Unit test for Service.
	* test_support/Supplied_Service.[hc]pp: New service class with internal vector of prebuilt actions.

2007-06-19 Eric Hughes <eh@narthex.us>
	Added a completion check for the test listening action.
	All unit tests now fully pass.

2007-06-19 Eric Hughes <eh@narthex.us>
	Added wakeup_listener_allocated to be the auxiliary object in the scheduling queue.
	Changed constructor for old auxiliary items into a call to reconstruct on the old object.
	Eliminated identifier Basic_Wakeup_Listener.

2007-06-18 Eric Hughes <eh@narthex.us>
	Removed singleton construction for Scheduler.

2007-06-17 Eric Hughes <eh@narthex.us>
	Changed activate_one_item to use a queue pointer rather than a reference.  A reference points to a single location in the priority queue (which reorders itself), whereas a pointer points to the same entry as it moves around.
	Changed index version of reorder to use a permutation_index.

2007-06-17 Eric Hughes <eh@narthex.us>
	Changed wakeup_listener to store a permutation_index rather than a pointer.  This eliminates an essential duplication, having stored both the scheduler and its queue addresses both.
	Expanded permutation vector to incorporate an auxiliary object, used to hold wakeup_listener.	
	Changed interface to push to take this auxiliary object.
	Added a reorder( size_t ) call that directly takes the permutation_index in wakeup_listener.

2007-06-17 Eric Hughes <eh@narthex.us>
	Found defect with wakeup_listener allocated with queue_item, so pointers to such aren't stable.
	Added another class parameter to Scheduling_Queue etc. in preparation for storing wakeup_listener stably.

2007-06-16 Eric Hughes <eh@narthex.us>
	Added guard for wakeup to require a listener present.
	Moved wakeup_listener from ACT.hpp to Scheduler.hpp
	Added scheduler accessor to wakeup_listener.  Will allow removal of singleton.
	Added action type to scheduled item.  Fixed comparison function.
	Implemented add_service.
