// 
//   Copyright (C) 2005, 2006 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// Linking Gnash statically or dynamically with other modules is making a
// combined work based on Gnash. Thus, the terms and conditions of the GNU
// General Public License cover the whole combination.
//
// As a special exception, the copyright holders of Gnash give you
// permission to combine Gnash with free software programs or libraries
// that are released under the GNU LGPL and with code included in any
// release of Talkback distributed by the Mozilla Foundation. You may
// copy and distribute such a system following the terms of the GNU GPL
// for all but the LGPL-covered parts and Talkback, and following the
// LGPL for the LGPL-covered parts.
//
// Note that people who make modified versions of Gnash are not obligated
// to grant this special exception for their modified versions; it is their
// choice whether to do so. The GNU General Public License gives permission
// to release a modified version without this exception; this exception
// also makes it possible to release a modified version which carries
// forward this exception.
// 
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string>
#include <vector>
#include <iostream>
#include <fstream>

#include "log.h"
#include "rc.h"

using namespace std;
namespace gnash {
  
RcInitFile::RcInitFile() : _splash_screen(true),
                           _localdomain_only(false),
                           _localhost_only(true)
{
}

RcInitFile::~RcInitFile()
{
    
}

// Look for a config file in the likely places.
bool
RcInitFile::loadFiles()
{
  char *home;
  string loadfile;
  
  // Check the default system location
  loadfile = "/etc/gnashrc";
  parseFile(loadfile);

  // Check the default config location
  loadfile = "/usr/local/etc/gnashrc";
  parseFile(loadfile);
  
  // Check the users home directory
  home = getenv("HOME");
  if (home) {
    loadfile = home;
    loadfile += "/.gnashrc";
    return parseFile(loadfile);
  }
  
  return false;
}

// Parse the config file and set the variables.
bool
RcInitFile::parseFile(string filespec)
{
  struct stat stats;
  string action;
  string variable;
  string value;
  ifstream in;

  dbglogfile << "Seeing if " << filespec << " exists." << endl;
  if (filespec.size() == 0) {
    return false;
  }
  
  if (stat(filespec.c_str(), &stats) == 0) {
    in.open(filespec.c_str());
    
    if (!in) {
      dbglogfile << "ERROR: Couldn't open file: " << filespec << endl;
      return false;
    }

    // Read in each line and parse it
    while (!in.eof()) {
      // Get the first token
      in >> action;
      // Ignore comment lines
      if (action[0] == '#') {
        dbglogfile << "Ignoring comment line " << endl;
        // suck up the rest of the line
        char name[128];
        in.getline(name, 128);
        continue;
      }
      
      in >> variable >> value;
      //      dbglogfile << action << variable << value << endl;

      cerr << variable << ":" << ":" << value << endl;
      
      if (action == "set") {
        if (variable == "splash_screen") {
            if (value == "on") {
                _splash_screen = true;
                dbglogfile << "Splash Screen Enabled " << endl;
            }
            if (value == "off") {
                _splash_screen = false;
                dbglogfile << "Splash Screen Disabled " << endl;
            }
            continue;
        }
        if (variable == "localdomain") {
            if (value == "on") {
                if (_localhost_only) {
                    _localhost_only = false;
                }
                _localdomain_only = true;
                dbglogfile << "Accessing Local Domain only " << endl;
            }
            if (value == "off") {
                _localdomain_only = false;
                dbglogfile << "Accessing all Domains" << endl;
            }            
            continue;
        }
        // This is more restrictive than local domain
        if (variable == "localhost") {
            if (value == "on") {
                _localdomain_only = true;
                if (_localdomain_only) {
                    _localdomain_only = false;
                }
                dbglogfile << "Accessing Localhost only " << endl;
            }
            if (value == "off") {
                _localdomain_only = false;
                dbglogfile << "Accessing all network hosts" << endl;
            }         
            continue;
        }
        if (variable == "blacklist") {
            string::size_type pos;
            while ((pos = value.find(':', 0)) != string::npos) {
                _blacklist.push_back(value.substr(0, pos));
                value.erase(0, pos+1);
            }
            _blacklist.push_back(value);
            continue;
        }
        if (variable == "whitelist") {
            cerr << variable << ":" << ":" << value << endl;
            string::size_type pos;
            while ((pos = value.find(':', 0)) != string::npos) {
                _whitelist.push_back(value.substr(0, pos));
                value.erase(0, pos+1);
            }
            _whitelist.push_back(value);
            continue;
        }
      }
    }
  } else {
    if (in) {
      in.close();
    }
    return false;
  }  

  if (in) {
    in.close();
  }
  return true;
}

// Write the changed settings to the config file
bool
RcInitFile::updateFile(string filespec)
{
    cerr << __PRETTY_FUNCTION__ << "ERROR: unimplemented!" << endl;
    return false;
}

void
RcInitFile::useSplashScreen(bool value)
{
    _splash_screen = value;
}

void
RcInitFile::useLocalDomain(bool value)
{
    _localdomain_only = value;
}

void
RcInitFile::useLocalHost(bool value)
{
    _localhost_only = value;
}

} // end of namespace gnash



