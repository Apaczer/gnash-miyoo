
load_lib "dejagnu.exp"


# If tracing has been enabled at the top level, then turn it on here
# too.
if $tracelevel {
    strace $tracelevel
}

set timeoutmsg "Timed out: Never got started, "
set timeout 100
set file all
set timetol 0
set executable "../../utilities/gprocessor"
set params "-v "

foreach file [glob ${srcdir}/*.as] {
foreach swfversion [list 5 6 7] {

    # some tests might do different things when built for different
    # SWF target versions.
    exec makeswf -DOUTPUT_VERSION=${swfversion} -v${swfversion} ${file}

    # ready for Ming-0.4 naming of .pp file
    #exec rm -f ${file}.pp ${file}.swf.frame0.pp
    if [info exists file] {
#	puts "$file exists"
    } else {
	perror "$file doesn't exist"
	return -1
    }

#    verbose "The executable is $executable $params ${file}.swf" 2
    if ![file exists out.swf] {
	perror "The executable, \"$executable\" is missing" 0
	return "No source file found"
    }

    set testid "SWF${swfversion} [ file tail ${file} ]"

    # spawn the executable and look for the DejaGnu output messages from the
    # test case.
    spawn -noecho -open [open "|./${executable} ${params} out.swf" "r"]
    # spawn ${executable} ${params} out.swf
    expect {
	-re "\[0-9\]\[0-9\]:..:..:${text}\r\n" {
	    regsub "\[\n\r\t\]*NOTE: $text\r\n" $expect_out(0,string) "" output
	    verbose "$output" 3
	    set timetol 0
	    exp_continue
	}
	-re "NOTE:\[^\r\n]*\r\n" {
	    regsub "\[\n\r\t\]*NOTE: " $expect_out(0,string) "" output
	    set output [string range $output 6 end-2]
	    verbose "${testid}: $output" 2
	    set timetol 0
	    exp_continue
	}
	-re "PASSED:\[^\r\n]*\r\n" {
	    regsub "\[\n\r\t\]*PASSED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2]
	    pass "${testid}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "FAILED:\[^\r\n\]*\r\n" {
	    regsub "\[\n\r\t\]*FAILED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2] 
	    fail "${testid}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "UNTESTED:\[^\r\n]*\r\n" {
	    regsub "\[\n\r\t\]*TESTED: " $expect_out(0,string) "" output
	    set output [string range $output 8 end-2]
	    untested "${testid}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "UNRESOLVED:\[^\r\n]*\r\n" {
	    regsub "\[\n\r\t\]*UNRESOLVED: " $expect_out(0,string) "" output
	    set output [string range $output 8 end-2]
	    unresolved "${testid}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "Totals" {
	    verbose "All done" 2
	}
	eof {
	    #	    unresolved "${executable} died prematurely"
	    #	    catch close
	    #	    return "${executable} died prematurely"
	}
	timeout {
	    warning "Timed out executing test case"
	    if { $timetol <= 2 } {
		incr timetol
		exp_continue
	    } else {
		-		catch close
		return "Timed out executing test case"
	    }
	}
    }

    # force a close of the executable to be safe.
    catch close
}
}


