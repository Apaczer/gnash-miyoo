// NetConnection_as.hx:  ActionScript 3 "NetConnection" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090514 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.net.NetConnection;
import flash.display.MovieClip;
#else
import flash.NetConnection;
import flash.MovieClip;
#end
import flash.Lib;
import Type;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class NetConnection_as {
    static function main() {
        var x1:NetConnection = new NetConnection();

        // Make sure we actually get a valid class        
        if (x1 != null) {
            DejaGnu.pass("NetConnection class exists");
        } else {
            DejaGnu.fail("NetConnection class doesn't exist");
        }
// Tests to see if all the properties exist. All these do is test for
// existance of a property, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
// 	if (x1.client == Object) {
// 	    DejaGnu.pass("NetConnection.client property exists");
// 	} else {
// 	    DejaGnu.fail("NetConnection.client property doesn't exist");
// 	}
	if (x1.connected == false) {
	    DejaGnu.pass("NetConnection.connected property exists");
	} else {
	    DejaGnu.fail("NetConnection.connected property doesn't exist");
	}
	if (x1.connectedProxyType == null) {
	    DejaGnu.pass("NetConnection.connectedProxyType property exists");
	} else {
	    DejaGnu.fail("NetConnection.connectedProxyType property doesn't exist");
	}
// FIXME: Cannot access static field defaultObjectEncoding from a class instance
// 	if (x1.defaultObjectEncoding == 0) {
// 	    DejaGnu.pass("NetConnection.defaultObjectEncoding property exists");
// 	} else {
// 	    DejaGnu.fail("NetConnection.defaultObjectEncoding property doesn't exist");
// 	}
	if (x1.objectEncoding == 0) {
	    DejaGnu.pass("NetConnection.objectEncoding property exists");
	} else {
	    DejaGnu.fail("NetConnection.objectEncoding property doesn't exist");
	}
	if (x1.proxyType == null) {
	    DejaGnu.pass("NetConnection.proxyType property exists");
	} else {
	    DejaGnu.fail("NetConnection.proxyType property doesn't exist");
	}
	if (x1.uri == null) {
	    DejaGnu.pass("NetConnection.uri property exists");
	} else {
	    DejaGnu.fail("NetConnection.uri property doesn't exist");
	}
	if (x1.usingTLS == false) {
	    DejaGnu.pass("NetConnection.usingTLS property exists");
	} else {
	    DejaGnu.fail("NetConnection.usingTLS property doesn't exist");
	}

// Tests to see if all the methods exist. All these do is test for
// existance of a method, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	if (x1.addHeader == null) {
	    DejaGnu.pass("NetConnection::addHeader() method exists");
	} else {
	    DejaGnu.fail("NetConnection::addHeader() method doesn't exist");
	}
	if (x1.call == null) {
	    DejaGnu.pass("NetConnection::call() method exists");
	} else {
	    DejaGnu.fail("NetConnection::call() method doesn't exist");
	}
	if (x1.close == null) {
	    DejaGnu.pass("NetConnection::close() method exists");
	} else {
	    DejaGnu.fail("NetConnection::close() method doesn't exist");
	}
	if (x1.connect == null) {
	    DejaGnu.pass("NetConnection::connect() method exists");
	} else {
	    DejaGnu.fail("NetConnection::connect() method doesn't exist");
	}

        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

