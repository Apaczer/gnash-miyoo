// DisplayObject_as.hx:  ActionScript 3 "DisplayObject" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090514 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.accessibility.AccessibilityProperties;
import flash.display.DisplayObject;
import flash.display.MovieClip;
#else
import flash.DisplayObject;
import flash.MovieClip;
#end
import flash.Lib;
import Type;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class DisplayObject_as {
    static function main() {
        var x1:DisplayObject = new DisplayObject();

        // Make sure we actually get a valid class        
        if (x1 != null) {
            DejaGnu.pass("DisplayObject class exists");
        } else {
            DejaGnu.fail("DisplayObject lass doesn't exist");
        }
// Tests to see if all the properties exist. All these do is test for
// existance of a property, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
// 	if (x1.accessibilityProperties == accessibilityProperties) {
// 	    DejaGnu.pass("DisplayObject::accessibilityProperties property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::accessibilityProperties property doesn't exist");
// 	}
	if (x1.alpha == 0) {
	    DejaGnu.pass("DisplayObject::alpha property exists");
	} else {
	    DejaGnu.fail("DisplayObject::alpha property doesn't exist");
	}
	if (x1.blendMode == null) {
	    DejaGnu.pass("DisplayObject::blendMode property exists");
	} else {
	    DejaGnu.fail("DisplayObject::blendMode property doesn't exist");
	}
	if (x1.cacheAsBitmap == false) {
	    DejaGnu.pass("DisplayObject::cacheAsBitmap property exists");
	} else {
	    DejaGnu.fail("DisplayObject::cacheAsBitmap property doesn't exist");
	}
// 	if (x1.filters == 0) {
// 	    DejaGnu.pass("DisplayObject::filters property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::filters property doesn't exist");
// 	}
	if (x1.height == 0) {
	    DejaGnu.pass("DisplayObject::height property exists");
	} else {
	    DejaGnu.fail("DisplayObject::height property doesn't exist");
	}
// 	if (x1.loaderInfo == loaderInfo) {
// 	    DejaGnu.pass("DisplayObject::loaderInfo property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::loaderInfo property doesn't exist");
// 	}
// 	if (x1.mask == mask) {
// 	    DejaGnu.pass("DisplayObject::mask property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::mask property doesn't exist");
// 	}
	if (x1.mouseX == 0) {
	    DejaGnu.pass("DisplayObject::mouseX property exists");
	} else {
	    DejaGnu.fail("DisplayObject::mouseX property doesn't exist");
	}
	if (x1.mouseY == 0) {
	    DejaGnu.pass("DisplayObject::mouseY property exists");
	} else {
	    DejaGnu.fail("DisplayObject::mouseY property doesn't exist");
	}
	if (x1.name == null) {
	    DejaGnu.pass("DisplayObject::name property exists");
	} else {
	    DejaGnu.fail("DisplayObject::name property doesn't exist");
	}
// 	if (x1.opaqueBackground == Object) {
// 	    DejaGnu.pass("DisplayObject::opaqueBackground property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::opaqueBackground property doesn't exist");
// 	}
// 	if (x1.parent == parent) {
// 	    DejaGnu.pass("DisplayObject::parent property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::parent property doesn't exist");
// 	}
// 	if (x1.root == root) {
// 	    DejaGnu.pass("DisplayObject::root property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::root property doesn't exist");
// 	}
	if (x1.rotation == 0) {
	    DejaGnu.pass("DisplayObject::rotation property exists");
	} else {
	    DejaGnu.fail("DisplayObject::rotation property doesn't exist");
	}
// 	if (x1.scale9Grid == Rectangle) {
// 	    DejaGnu.pass("DisplayObject::scale9Grid property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::scale9Grid property doesn't exist");
// 	}
	if (x1.scaleX == 0) {
	    DejaGnu.pass("DisplayObject::scaleX property exists");
	} else {
	    DejaGnu.fail("DisplayObject::scaleX property doesn't exist");
	}
	if (x1.scaleY == 0) {
	    DejaGnu.pass("DisplayObject::scaleY property exists");
	} else {
	    DejaGnu.fail("DisplayObject::scaleY property doesn't exist");
	}
// 	if (x1.scrollRect == Rectangle) {
// 	    DejaGnu.pass("DisplayObject::scrollRect property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::scrollRect property doesn't exist");
// 	}
// 	if (x1.stage == Stage) {
// 	    DejaGnu.pass("DisplayObject::stage property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::stage property doesn't exist");
// 	}
// 	if (x1.transform == transform) {
// 	    DejaGnu.pass("DisplayObject::transform property exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::transform property doesn't exist");
// 	}
	if (x1.visible == false) {
	    DejaGnu.pass("DisplayObject::visible property exists");
	} else {
	    DejaGnu.fail("DisplayObject::visible property doesn't exist");
	}
	if (x1.width == 0) {
	    DejaGnu.pass("DisplayObject::width property exists");
	} else {
	    DejaGnu.fail("DisplayObject::width property doesn't exist");
	}
	if (x1.x == 0) {
	    DejaGnu.pass("DisplayObject::x property exists");
	} else {
	    DejaGnu.fail("DisplayObject::x property doesn't exist");
	}
	if (x1.y == 0) {
	    DejaGnu.pass("DisplayObject::y property exists");
	} else {
	    DejaGnu.fail("DisplayObject::y property doesn't exist");
	}

// Tests to see if all the methods exist. All these do is test for
// existance of a method, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
// 	if (x1.getBounds == Rectangle) {
// 	    DejaGnu.pass("DisplayObject::getBounds() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::getBounds() method doesn't exist");
// 	}
// 	if (x1.getRect == Rectangle) {
// 	    DejaGnu.pass("DisplayObject::getRect() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::getRect() method doesn't exist");
// 	}
// 	if (x1.globalToLocal == Point) {
// 	    DejaGnu.pass("DisplayObject::globalToLocal() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::globalToLocal() method doesn't exist");
// 	}
// 	if (x1.hitTestObject == Point) {
// 	    DejaGnu.pass("DisplayObject::hitTestObject() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::hitTestObject() method doesn't exist");
// 	}
// 	if (x1.hitTestPoint == Point) {
// 	    DejaGnu.pass("DisplayObject::hitTestPoint() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::hitTestPoint() method doesn't exist");
// 	}
// 	if (x1.localToGlobal == Point) {
// 	    DejaGnu.pass("DisplayObject::localToGlobal() method exists");
// 	} else {
// 	    DejaGnu.fail("DisplayObject::localToGlobal() method doesn't exist");
// 	}

        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

