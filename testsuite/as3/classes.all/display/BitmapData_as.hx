// BitmapData_as.hx:  ActionScript 3 "BitmapData" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090514 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.utils.ByteArray;
import flash.display.BitmapData;
import flash.display.DisplayObject;
import flash.geom.Rectangle;
import flash.display.MovieClip;
#else
import flash.BitmapData;
import flash.MovieClip;
import flash.DisplayObject;
#end
import flash.Lib;
import Type;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class BitmapData_as {
    static function main() {
        var x1:BitmapData = new BitmapData(0, 30, false, 0xFFCC00);

        // Make sure we actually get a valid class        
        if (x1 != null) {
            DejaGnu.pass("BitmapData class exists");
        } else {
            DejaGnu.fail("BitmapData lass doesn't exist");
        }
// Tests to see if all the properties exist. All these do is test for
// existance of a property, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	if (x1.height == 0) {
	    DejaGnu.pass("BitmapData::height property exists");
	} else {
	    DejaGnu.fail("BitmapData::height property doesn't exist");
	}
	if (x1.rect == Rectangle) {
	    DejaGnu.pass("BitmapData::rect property exists");
	} else {
	    DejaGnu.fail("BitmapData::rect property doesn't exist");
	}
	if (x1.transparent == false) {
	    DejaGnu.pass("BitmapData::transparent property exists");
	} else {
	    DejaGnu.fail("BitmapData::transparent property doesn't exist");
	}
	if (x1.width == 0) {
	    DejaGnu.pass("BitmapData::width property exists");
	} else {
	    DejaGnu.fail("BitmapData::width property doesn't exist");
	}

// Tests to see if all the methods exist. All these do is test for
// existance of a method, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	if (x1.applyFilter == null) {
	    DejaGnu.pass("BitmapData::applyFilter() method exists");
	} else {
	    DejaGnu.fail("BitmapData::applyFilter() method doesn't exist");
	}
// 	if (x1.clone == BitmapData) {
// 	    DejaGnu.pass("BitmapData::clone() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::clone() method doesn't exist");
// 	}
	if (x1.colorTransform == null) {
	    DejaGnu.pass("BitmapData::colorTransform() method exists");
	} else {
	    DejaGnu.fail("BitmapData::colorTransform() method doesn't exist");
	}
// 	if (x1.compare == DisplayObject) {
// 	    DejaGnu.pass("BitmapData::compare() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::compare() method doesn't exist");
// 	}
	if (x1.copyChannel == null) {
	    DejaGnu.pass("BitmapData::copyChannel() method exists");
	} else {
	    DejaGnu.fail("BitmapData::copyChannel() method doesn't exist");
	}
	if (x1.copyPixels == null) {
	    DejaGnu.pass("BitmapData::copyPixels() method exists");
	} else {
	    DejaGnu.fail("BitmapData::copyPixels() method doesn't exist");
	}
	if (x1.dispose == null) {
	    DejaGnu.pass("BitmapData::dispose() method exists");
	} else {
	    DejaGnu.fail("BitmapData::dispose() method doesn't exist");
	}
	if (x1.draw == null) {
	    DejaGnu.pass("BitmapData::draw() method exists");
	} else {
	    DejaGnu.fail("BitmapData::draw() method doesn't exist");
	}
	if (x1.fillRect == null) {
	    DejaGnu.pass("BitmapData::fillRect() method exists");
	} else {
	    DejaGnu.fail("BitmapData::fillRect() method doesn't exist");
	}
	if (x1.floodFill == null) {
	    DejaGnu.pass("BitmapData::floodFill() method exists");
	} else {
	    DejaGnu.fail("BitmapData::floodFill() method doesn't exist");
	}
// 	if (x1.generateFilterRect == Rectangle) {
// 	    DejaGnu.pass("BitmapData::generateFilterRect() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::generateFilterRect() method doesn't exist");
// 	}
// 	if (x1.getColorBoundsRect == Rectangle) {
// 	    DejaGnu.pass("BitmapData::getColorBoundsRect() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::getColorBoundsRect() method doesn't exist");
// 	}
	if (x1.getPixel(1,0) == 0) {
	    DejaGnu.pass("BitmapData::getPixel() method exists");
	} else {
	    DejaGnu.fail("BitmapData::getPixel() method doesn't exist");
	}
	if (x1.getPixel32(1,1) == 0) {
	    DejaGnu.pass("BitmapData::getPixel32() method exists");
	} else {
	    DejaGnu.fail("BitmapData::getPixel32() method doesn't exist");
	}
// 	if (x1.getPixels(1,0) == Rectangle) {
// 	    DejaGnu.pass("BitmapData::getPixels() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::getPixels() method doesn't exist");
// 	}
// 	if (x1.hitTest == false) {
// 	    DejaGnu.pass("BitmapData::hitTest() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::hitTest() method doesn't exist");
// 	}
	if (x1.lock == null) {
	    DejaGnu.pass("BitmapData::lock() method exists");
	} else {
	    DejaGnu.fail("BitmapData::lock() method doesn't exist");
	}
	if (x1.merge == null) {
	    DejaGnu.pass("BitmapData::merge() method exists");
	} else {
	    DejaGnu.fail("BitmapData::merge() method doesn't exist");
	}
	if (x1.noise == null) {
	    DejaGnu.pass("BitmapData::noise() method exists");
	} else {
	    DejaGnu.fail("BitmapData::noise() method doesn't exist");
	}
	if (x1.paletteMap == null) {
	    DejaGnu.pass("BitmapData::paletteMap() method exists");
	} else {
	    DejaGnu.fail("BitmapData::paletteMap() method doesn't exist");
	}
	if (x1.perlinNoise == null) {
	    DejaGnu.pass("BitmapData::perlinNoise() method exists");
	} else {
	    DejaGnu.fail("BitmapData::perlinNoise() method doesn't exist");
	}
// FIXME: this needs more arguments
// 	if (x1.pixelDissolve == 0) {
// 	    DejaGnu.pass("BitmapData::pixelDissolve() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::pixelDissolve() method doesn't exist");
// 	}
	if (x1.scroll == null) {
	    DejaGnu.pass("BitmapData::scroll() method exists");
	} else {
	    DejaGnu.fail("BitmapData::scroll() method doesn't exist");
	}
	if (x1.setPixel == null) {
	    DejaGnu.pass("BitmapData::setPixel() method exists");
	} else {
	    DejaGnu.fail("BitmapData::setPixel() method doesn't exist");
	}
	if (x1.setPixel32 == null) {
	    DejaGnu.pass("BitmapData::setPixel32() method exists");
	} else {
	    DejaGnu.fail("BitmapData::setPixel32() method doesn't exist");
	}
	if (x1.setPixels == null) {
	    DejaGnu.pass("BitmapData::setPixels() method exists");
	} else {
	    DejaGnu.fail("BitmapData::setPixels() method doesn't exist");
	}
// FIXME: this needs more arguments
// 	if (x1.threshold == 0) {
// 	    DejaGnu.pass("BitmapData::threshold() method exists");
// 	} else {
// 	    DejaGnu.fail("BitmapData::threshold() method doesn't exist");
// 	}
	if (x1.unlock == null) {
	    DejaGnu.pass("BitmapData::unlock() method exists");
	} else {
	    DejaGnu.fail("BitmapData::unlock() method doesn't exist");
	}

        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

