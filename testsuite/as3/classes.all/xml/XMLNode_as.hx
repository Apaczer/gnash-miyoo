// XMLNode_as.hx:  ActionScript 3 "XMLNode" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090514 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.xml.XMLNode;
import flash.xml.XMLNodeType;
import flash.display.MovieClip;
#else
import flash.MovieClip;
#end
import flash.Lib;
import Type;
import Std;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class XMLNode_as {
    static function main() {
	#if flash9
        var x1:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, null);	
	
        // Make sure we actually get a valid class        
        if (Std.is(x1, XMLNode)) {
            DejaGnu.pass("XMLNode class exists");
        } else {
            DejaGnu.fail("XMLNode class doesn't exist");
        }

	// Tests to see if all the properties exist. All these do is test for
	// existance of a property, and don't test the functionality at all. This
	// is primarily useful only to test completeness of the API implementation.

	// Need to fix the below four properties.  Do not know how to create a parent
	// node in order to test them.
	if (Std.is(x1.attributes, Dynamic)) {
	    DejaGnu.pass("XMLNode.attributes property exists");
 	} else {
	    DejaGnu.fail("XMLNode.attributes property doesn't exist");
 	}
	if (Std.is(x1.childNodes, Array)) {
	    DejaGnu.pass("XMLNode.childNodes property exists");
 	} else {
 	    DejaGnu.fail("XMLNode.childNodes property doesn't exist");
 	}
	if (Type.typeof(x1.localName)==ValueType.TNull) {
	    DejaGnu.pass("XMLNode.localName property exists");
	} else {
	    DejaGnu.fail("XMLNode.localName property doesn't exist");
	}
	if (Type.typeof(x1.namespaceURI)==ValueType.TNull) {
	    DejaGnu.pass("XMLNode.namespaceURI property exists");
	} else {
	    DejaGnu.fail("XMLNode.namespaceURI property doesn't exist");
	}
	// FIXME
	/*if (Std.is(x1.nextSibling, XMLNode)) {
	    DejaGnu.pass("XMLNode.nextSibling property exists");
	} else {
	    DejaGnu.fail("XMLNode.nextSibling property doesn't exist");
	    DejaGnu.note("nextSibling: " + Type.typeof(x1.nextSibling));
	}*/
	if (Type.typeof(x1.nodeName)==ValueType.TNull) {
	    DejaGnu.pass("XMLNode.nodeName property exists");
	} else {
	    DejaGnu.fail("XMLNode.nodeName property doesn't exist");
	}
	// FIXME
	/*if (Std.is(x1.nodeType, XMLNodeType)) {
 	    DejaGnu.pass("XMLNode.nodeType property exists");
 	} else {
 	    DejaGnu.fail("XMLNode.nodeType property doesn't exist");
	}*/
	if (Type.typeof(x1.nodeValue)==ValueType.TNull) {
	    DejaGnu.pass("XMLNode.nodeValue property exists");
	} else {
	    DejaGnu.fail("XMLNode.nodeValue property doesn't exist");
	}
	// FIXME
	/*if (Std.is(x1.parentNode, XMLNode)) {
 	    DejaGnu.pass("XMLNode.parentNode property exists");
 	} else {
 	    DejaGnu.fail("XMLNode.parentNode property doesn't exist");
	}*/
	if (x1.prefix == null) {
	    DejaGnu.pass("XMLNode.prefix property exists");
	} else {
	    DejaGnu.fail("XMLNode.prefix property doesn't exist");
	}
	// FIXME
	/*if (Type.typeof(x1.previousSibling)==ValueType.TNull) {
 	    DejaGnu.pass("XMLNode.previousSibling property exists");
 	} else {
 	    DejaGnu.fail("XMLNode.previousSibling property doesn't exist");
 	}*/

	// Tests to see if all the methods exist. All these do is test for
	// existance of a method, and don't test the functionality at all. This
	// is primarily useful only to test completeness of the API implementation.
	if (Type.typeof(x1.appendChild)==ValueType.TFunction) {
	    DejaGnu.pass("XMLNode::appendChild() method exists");
	} else {
	    DejaGnu.fail("XMLNode::appendChild() method doesn't exist");
	}
	if (Type.typeof(x1.cloneNode)==ValueType.TFunction) {
 	    DejaGnu.pass("XMLNode::cloneNode() method exists");
	} else {
 	    DejaGnu.fail("XMLNode::cloneNode() method doesn't exist");
 	}
	if (Type.typeof(x1.getNamespaceForPrefix)==ValueType.TFunction) {
	    DejaGnu.pass("XMLNode::getNamespaceForPrefix() method exists");
	} else {
	    DejaGnu.fail("XMLNode::getNamespaceForPrefix() method doesn't exist");
	}
	if (Type.typeof(x1.getPrefixForNamespace)==ValueType.TFunction) {
	    DejaGnu.pass("XMLNode::getPrefixForNamespace() method exists");
	} else {
	    DejaGnu.fail("XMLNode::getPrefixForNamespace() method doesn't exist");
	}
	if (Type.typeof(x1.hasChildNodes)==TFunction) {
	    DejaGnu.pass("XMLNode::hasChildNodes() method exists");
 	} else {
 	    DejaGnu.fail("XMLNode::hasChildNodes() method doesn't exist");
 	}
	if (Type.typeof(x1.insertBefore)==TFunction) {
	    DejaGnu.pass("XMLNode::insertBefore() method exists");
	} else {
	    DejaGnu.fail("XMLNode::insertBefore() method doesn't exist");
	}
	if (Type.typeof(x1.removeNode)==TFunction) {
	    DejaGnu.pass("XMLNode::removeNode() method exists");
	} else {
	    DejaGnu.fail("XMLNode::removeNode() method doesn't exist");
	}
	if (Type.typeof(x1.toString)==TFunction) {
	    DejaGnu.pass("XMLNode::toString() method exists");
	} else {
	    DejaGnu.fail("XMLNode::toString() method doesn't exist");
	}

        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
	#end
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

