
load_lib "dejagnu.exp"


# If tracing has been enabled at the top level, then turn it on here
# too.
if $tracelevel {
    strace $tracelevel
}

set timeoutmsg "Timed out: Never got started, "
set timeout 100
set file all
set timetol 0
set params ""

# testcases is set by the Makefile in the site.exp data file.
foreach file $testcases {

    verbose "Running test $file"

    # spawn the executable and look for the DejaGnu output messages from the
    # test case.

    # this version of the call allows use of 'wait' to check return code
    # -open [open "|cmd" "r"] doesn't work for that
    spawn -noecho ./$file 

    expect {
	-re "NOTE:\[^\n]*\n" {
	    regsub "\[\n\t\]*NOTE: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2]
	    verbose "${file} $output" 
	    set timetol 0
	    exp_continue
	}
	-re "XPASSED:\[^\n]*\n" {
	    regsub "\[\n\t\]*XPASSED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2]
	    xpass "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "PASSED:\[^\n]*\n" {
	    regsub "\[\n\t\]*PASSED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2]
	    pass "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "XFAILED:\[^\n\]*\n" {
	    regsub "\[\n\t\]*XFAILED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2] 
	    xfail "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "FAILED:\[^\n\]*\n" {
	    regsub "\[\n\t\]*FAILED: " $expect_out(0,string) "" output
	    set output [string range $output 0 end-2] 
	    fail "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "UNTESTED:\[^\n]*\n" {
	    regsub "\[\n\t\]*TESTED: " $expect_out(0,string) "" output
	    set output [string range $output 8 end-2]
	    untested "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "UNRESOLVED:\[^\n]*\n" {
	    regsub "\[\n\t\]*UNRESOLVED: " $expect_out(0,string) "" output
	    set output [string range $output 8 end-2]
	    unresolved "${file}: $output"
	    set timetol 0
	    exp_continue
	}
	-re "Totals" {
	    verbose "All done" 2
	}
	eof {
	    #	    unresolved "${file} died prematurely"
	    #	    catch close
	    #	    return "${file} died prematurely"
	}
	timeout {
	    warning "Timed out executing test case"
	    if { $timetol <= 2 } {
		incr timetol
		exp_continue
	    } else {
		-		catch close
		return "Timed out executing test case"
	    }
	}
   }

	# wait for the process to coplete to
	# check return code
	set retcode [wait]

	# debugging
	#set i 0; foreach j $retcode { print "${file} wait($i) $j"; incr i }

	if { [ llength $retcode ] > 5 } {
		fail "${file} died prematurely ([lindex $retcode 6])"
	}
	if { [ lindex $retcode 3 ] != 0 } {
		fail "${file} exited with non-zero code ([lindex $retcode 3])"
	}



    # force a close of the executable to be safe.
    catch close
}


