
HOMEPATH = /mnt
TARGET ?= gnash
VERSION ?= $(shell date +%Y-%m-%d\ %H:%M)
RELEASEDIR = package
ASSETSDIR = assets
OPKG_ASSETSDIR = opkg_assets
LINK = $(TARGET).lnk
DESTDIR = emus
SECTION = emulators
ALIASES = aliases.txt

PRGNAME     = $(TARGET)

TOOLCHAINDIR	?= /opt/miyoo
SYSROOT			= $(TOOLCHAINDIR)/usr/arm-buildroot-linux-musleabi/sysroot
BINDIR			= $(TOOLCHAINDIR)/usr/bin
PKG_CONFIG		:= $(BINDIR)/pkg-config

CC			= $(BINDIR)/arm-linux-gcc
CXX			= $(BINDIR)/arm-linux-g++

RENDERER_CONFIG =  agg
HWACCEL_CONFIG = none
PIXEL_FORMAT = RGB565

PROFILE = 0

SRCDIR		= ./gui/sdl/$(RENDERER_CONFIG) ./libcore/asobj/flash/geom ./libmedia/ffmpeg ./libmedia ./libcore ./librender/$(RENDERER_CONFIG) ./librender ./gui ./gui/sdl ./libcore/abc ./libcore/asobj ./libcore/asobj/flash ./libcore/asobj/flash/filters ./libcore/asobj/flash/external ./libcore/asobj/flash/display ./libcore/asobj/flash/text ./libcore/asobj/flash/net ./libcore/swf ./libcore/vm ./libcore/parser ./libsound ./libsound/sdl ./libbase ./libdevice

ifeq ($(RENDERER_CONFIG), agg)
SRCDIR		+= ./agg/src/platform/sdl ./agg/src ./agg/src/ctrl
endif

VPATH		= $(SRCDIR)
SRC_C		= $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.c))
SRC_CP		= $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.cpp))
OBJ_C		= $(notdir $(patsubst %.c, %.o, $(SRC_C)))
OBJ_CP		= $(notdir $(patsubst %.cpp, %.o, $(SRC_CP)))
OBJS		= $(OBJ_C) $(OBJ_CP)

CFLAGS		= -Ofast -fno-PIC -fno-builtin -fno-math-errno -fomit-frame-pointer -fdata-sections -ffunction-sections -std=gnu++14 -flto
CFLAGS		+= -fno-common
	
CFLAGS		+= -DLSB_FIRST  -DHAVE_CONFIG_H -DNOGIF -DNOPNG

CFLAGS		+= -I./ -Ilibmedia/ffmpeg -Ilibmedia -Ilibrender/$(RENDERER_CONFIG) -Ilibrender -Igui -Igui/sdl -Ilibcore/abc -Ilibcore/asobj -Ilibcore/asobj/flash
CFLAGS		+= -Ilibcore/asobj/flash/filters -Ilibcore/asobj/flash/external -Ilibcore/asobj/flash/display -Ilibcore/asobj/flash/text -Ilibcore/asobj/flash/net -Ilibcore/swf
CFLAGS		+= -Ilibcore/vm -Ilibcore/parser -Ilibsound -Ilibsound/sdl -Ilibbase -Ilibdevice -Ilibcore -Ilibcore/asobj/flash/geom -Igui/sdl/$(RENDERER_CONFIG) -Iboost


CFLAGS		+= $(shell $(PKG_CONFIG) --cflags freetype2) $(shell $(PKG_CONFIG) --cflags sdl)

ifeq ($(RENDERER_CONFIG), cairo)
CFLAGS		+= -I/usr/include/cairo
else ifeq ($(RENDERER_CONFIG), agg)
CFLAGS		+= -I./agg/src/platform/sdl -I./agg/src -I./agg/src/ctrl -Iagg/include
endif

CFLAGS		+= -DGUI_SDL -DGUI_CONFIG=\"SDL\" -DRENDERER_CONFIG=\"$(RENDERER_CONFIG)\" -DHWACCEL_CONFIG=\"none\" -DCONFIG_CONFIG=\"none\" -DMEDIA_CONFIG=\"ffmpeg\" -DCXXFLAGS=\"ffmpeg\" -DPLUGINSDIR=\"./\"  -DSYSCONFDIR=\"./\" 
CFLAGS		+= -DSOUND_SDL -DUSE_MEDIA

ifeq ($(RENDERER_CONFIG), cairo)
CFLAGS 		+= -DRENDERER_CAIRO
else ifeq ($(RENDERER_CONFIG), agg)
CFLAGS		+= -DRENDERER_AGG
else ifeq ($(RENDERER_CONFIG), opengl)
CFLAGS		+= -DRENDERER_OPENGL
endif

ifeq ($(PIXEL_FORMAT), RGB565)
CFLAGS 		+= -DPIXELFORMAT_RGB565
else ifeq ($(PIXEL_FORMAT), RGB32)
CFLAGS		+= -DPIXELFORMAT_ARGB32
endif

ifeq ($(PROFILE), YES)
CFLAGS 		+= -fprofile-generate=/mnt/profile/gnash_gcda
else ifeq ($(PROFILE), APPLY)
CFLAGS		+= -fprofile-use="./"
endif

CXXFLAGS 	= $(CFLAGS) -ftree-vectorize

LDFLAGS     = -lc -lvorbis -lvorbisenc -logg -lgcc -lm -lstdc++ -latomic -lSDL -lasound -lfreetype -lavcodec -lavformat -lavutil -lswresample -lbz2 -lswscale -lopus -ljpeg -lpng -lz -pthread -Wl,-z,norelro -Wl,--hash-style=gnu -Wl,--build-id=none -Wl,-O1,--sort-common,--as-needed,--gc-sections -flto -no-pie -s
ifeq ($(RENDERER_CONFIG), cairo)
LDFLAGS		+= -lcairo
else ifeq ($(RENDERER_CONFIG), opengl)
LDFLAGS		+= -lGL -lGLU
endif

ifeq ($(PROFILE), YES)
LDFLAGS 	+= -lgcov
endif


# Rules to make executable
all: $(PRGNAME)

$(PRGNAME): $(OBJS)  
	$(CC) $(CFLAGS) -o $(PRGNAME) $^ $(LDFLAGS)

$(OBJ_C) : %.o : %.c
	$(CC) $(CFLAGS) -std=gnu99 -c -o $@ $<

$(OBJ_CP) : %.o : %.cpp
	$(CXX) $(CXXFLAGS) -std=gnu++14 -c -o $@ $<

package: all
	@rm -rf $(RELEASEDIR)
	@mkdir -p $(RELEASEDIR)
	@cp *$(TARGET) $(RELEASEDIR)/
	@mkdir -p $(RELEASEDIR)/$(DESTDIR)/$(TARGET)
	@mkdir -p $(RELEASEDIR)/gmenu2x/sections/$(SECTION)
	@mv $(RELEASEDIR)/*$(TARGET) $(RELEASEDIR)/$(DESTDIR)/$(TARGET)/
	@cp -r $(ASSETSDIR)/* $(RELEASEDIR)/$(DESTDIR)/$(TARGET)
	@cp $(OPKG_ASSETSDIR)/$(LINK) $(RELEASEDIR)/gmenu2x/sections/$(SECTION)
	@sed "s/^exec=.*/exec=\$(HOMEPATH)\/$(DESTDIR)\/$(TARGET)\/$(TARGET)/" $(OPKG_ASSETSDIR)/$(LINK) > $(RELEASEDIR)/gmenu2x/sections/$(SECTION)/$(LINK)
	@cp $(OPKG_ASSETSDIR)/$(ALIASES) $(RELEASEDIR)/$(DESTDIR)/$(TARGET)

zip: package
	@rm -rf $(RELEASEDIR)/*.ipk
	@cd $(RELEASEDIR) && zip -rq $(TARGET)$(VERSION).zip ./* && mv *.zip ..
	@rm -rf $(RELEASEDIR)/*
	mv $(TARGET)*.zip $(RELEASEDIR)/

ipk: package
	@rm -rf $(RELEASEDIR)/*.zip
	@mkdir -p .$(HOMEPATH)
	@mv $(RELEASEDIR)/* .$(HOMEPATH) && mv .$(HOMEPATH) $(RELEASEDIR)
	@mkdir -p $(RELEASEDIR)/data
	@mv $(RELEASEDIR)$(HOMEPATH) $(RELEASEDIR)/data/
	@echo "#!/bin/sh\nsync; echo 'Installing new $(TARGET)..'; rm /var/lib/opkg/info/$(TARGET).list; exit 0" > $(OPKG_ASSETSDIR)/CONTROL/preinst
	@echo "#!/bin/sh\nsync; echo 'Installation finished.'; echo 'Restarting $(TARGET)..'; sleep 1; killall $(TARGET); exit 0" > $(OPKG_ASSETSDIR)/CONTROL/postinst
	@chmod +x $(OPKG_ASSETSDIR)/CONTROL/postinst $(OPKG_ASSETSDIR)/CONTROL/preinst
	@cp -r $(OPKG_ASSETSDIR)/CONTROL $(RELEASEDIR)
	@sed "s/^Version:.*/Version: $(VERSION)/" $(OPKG_ASSETSDIR)/CONTROL/control > $(RELEASEDIR)/CONTROL/control
	@echo 2.0 > $(RELEASEDIR)/debian-binary
	@tar --owner=0 --group=0 -czvf $(RELEASEDIR)/data.tar.gz -C $(RELEASEDIR)/data/ . >/dev/null 2>&1
	@tar --owner=0 --group=0 -czvf $(RELEASEDIR)/control.tar.gz -C $(RELEASEDIR)/CONTROL/ . >/dev/null 2>&1
	@ar r $(TARGET).ipk $(RELEASEDIR)/control.tar.gz $(RELEASEDIR)/data.tar.gz $(RELEASEDIR)/debian-binary
	@rm -rf $(RELEASEDIR)/*
	mv $(TARGET).ipk $(RELEASEDIR)/

clean:
	rm -f $(PRGNAME) *.o
	rm -rf $(RELEASEDIR)
	rm -f *.ipk
	rm -f *.zip
