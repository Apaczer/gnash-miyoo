// ApplicationDomain_as3.cpp:  ActionScript "ApplicationDomain_as3" class, for Gnash.
//
//   Copyright (C) 2009 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

#ifdef HAVE_CONFIG_H
#include "gnashconfig.h"
#endif

#include "ApplicationDomain_as3.h"
#include "as_object.h" // for inheritance
#include "log.h"
#include "fn_call.h"
#include "smart_ptr.h" // for boost intrusive_ptr
#include "builtin_function.h" // need builtin_function
#include "GnashException.h" // for ActionException

namespace gnash {

static as_value applicationdomain_as3_hasDefinition(const fn_call& fn);
as_value applicationdomain_as3_ctor(const fn_call& fn);

static as_value
attachApplicationDomain_as3Interface(as_object& o)
{
    o.init_member("hasDefinition", new builtin_function(applicationdomain_as3_hasDefinition));
}

static as_object*
getApplicationDomain_as3Interface()
{
	static boost::intrusive_ptr<as_object> o;
	if ( ! o ) {
		o = new as_object();
		attachApplicationDomain_as3Interface(*o);
	}
	return o.get();
}

class applicationdomain_as3_as_object: public as_object
{

public:

	applicationdomain_as3_as_object()
		:
		as_object(getApplicationDomain_as3Interface())
	{}

	// override from as_object ?
	//std::string get_text_value() const { return "ApplicationDomain_as3"; }

	// override from as_object ?
	//double get_numeric_value() const { return 0; }
};


static as_value
applicationdomain_as3_hasDefinition(const fn_call& fn)
{
    boost::intrusive_ptr<applicationdomain_as3_as_object> ptr = ensureType<applicationdomain_as3_as_object>(fn.this_ptr);
	UNUSED(ptr);
	log_unimpl (__FUNCTION__);
	return as_value();
}

as_value
applicationdomain_as3_ctor(const fn_call& fn)
{
	boost::intrusive_ptr<as_object> obj = new applicationdomain_as3_as_object;

	return as_value(obj.get()); // will keep alive
}

// extern (used by Global.cpp)
void applicationdomain_as3_class_init(as_object& global)
{
	// This is going to be the global ApplicationDomain_as3 "class"/"function"
	static boost::intrusive_ptr<builtin_function> cl;

	if ( cl == NULL ) {
		cl=new builtin_function(&applicationdomain_as3_ctor, getApplicationDomain_as3Interface());
		// replicate all interface to class, to be able to access
		// all methods as static functions
		attachApplicationDomain_as3Interface(*cl);
	}

	// Register _global.ApplicationDomain_as3
	global.init_member("ApplicationDomain_as3", cl.get());
}

} // end of gnash namespace
